*** RENDER WITH REDUX AND WITH ROUTER BY MURILO ***

    import React from 'react';
    import { Provider } from 'react-redux';
    import { createStore } from 'redux';
    import { render } from '@testing-library/react';

    import rootReducer from '../reducers';

    export default function renderWithRedux(
      component,
      initialState = {},
    ) {
      let store = createStore(rootReducer, initialState);
      return {
        ...render(
          <Provider store={store}>
            {component}
          </Provider>,
        ),
        store,
      };
    }

NO TESTE ...

    const renderWithRouter = (initialEntries = ['/']) => (
    <Router history={createMemoryHistory({ initialEntries })}>
      <App />
    </Router>
  );

    const { getByText } = renderWithRedux(
      renderWithRouter(),
      { registerReducer: [], loginReducer: {} },
    );


*** RENDER WITH REDUX ***

    const renderWithRedux = (
      component,
      { initialState, store = createStore(reducer, initialState) } = {}
    ) => {
      return {
        ...render(<Provider store={store}>{component}</Provider>),
        store,
      }
    }


** RENDER WITH REDUX COM COMBINE REDUCERS **

    const renderWithRedux = (
      component,
      { initialState, store = createStore(combineReducers({ clickReducer }), initialState) } = {}
    ) => {
      return {
        ...render(<Provider store={store}>{component}</Provider>),
        store,
      }
    }

** RENDER WITH REDUX COM THUNK **

    import React from 'react';
    import { Provider } from 'react-redux';
    import { render } from '@testing-library/react';
    import thunk from 'redux-thunk';
    import reducer from '../../reducers';

    const createMockStore = (initialState) => (
      createStore(combineReducers({ reducer }), initialState, applyMiddleware(thunk))
    );

    const renderWithRedux = (
      component, { initialState, store = createMockStore(initialState) } = {},
    ) => ({
      ...render(<Provider store={ store }>{component}</Provider>),
      store});

    export default renderWithRedux;

** EXEMPLO DE TESTE COM RENDER WITH REDUX COM THUNK **

    import { fireEvent, waitFor } from '@testing-library/react';
    import React from 'react';
    import fetchMock from 'fetch-mock-jest';
    import App from '../App';
    import renderWithRedux from './helpers';

    describe('Página principal', () => {
      test('Testa que o botão de adicionar cachorro está presente', async () => {
        const { queryByText } = renderWithRedux(<App />);
        const buttonDoguinho = queryByText('Novo Doguinho');

        expect(buttonDoguinho).toBeInTheDocument();

        fetchMock.getOnce('https://dog.ceo/api/breeds/image/random', {
          body: { message: 'myDogUrl' },
        });

        fireEvent.click(buttonDoguinho);
        await waitFor(() => expect(fetchMock.called()).toBeTruthy());
      });
    });
