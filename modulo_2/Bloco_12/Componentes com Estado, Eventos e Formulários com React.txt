Estado
O Estado de um componente é um lugar especial que todo componente tem para armazenar informações que devem persistir enquanto a tela não for fechada ou atualizada . É o filtro selecionado, o item da lista destacado, o carrinho de compras, tudo isso e mais!
Essa é, talvez, a peça mais essencial para o funcionamento do React. Enquanto numa aplicação JavaScript sem uso de bibliotecas tais informações ficariam, muito provavelmente, espalhadas e desorganizadas, no React cada componente cuida das suas informações e o React garante que todas estejam atualizadas de maneira otimizada. 

/////

State vs Props
O conceito é: state deve servir para guardar valores/estados do Componente que mudam com o uso do mesmo, para guardar uma alteração de estado que pode ter efeito na renderização do próprio componente. As props são valores estáticos, ou que no contexto de um Componente sejam estáticos, ou seja, não sofrem alteração dentro do escopo do componente que as recebe.
Pelos princípios do React você nunca deve tentar alterar o que um componente recebe como props como no exemplo abaixo:
    this.props.name = 'novo nome';


/////

RESUMO

Vamos recapitular? Hoje, no conteúdo, começamos a desenvolver as seguintes habilidades:
    Ler o estado de um componente e usá-lo para alterar o que exibimos no browser;
    Inicializar um componente, dando a ele um estado pré-definido;
    Atualizar o estado de um componente.
    Capturar eventos utilizando a sintaxe do React
Para isso estudamos, no conteúdo, os seguintes pontos:
    Todo componente possui seu próprio estado e tem 100% de controle sobre ele;
    Quando um componente é colocado na tela ele executa uma função chamada construtor , e usando a linha super() podemos sobrescrevê-la para estender seu comportamento;
    O objeto this , acessível a toda classe de componente React , contém tudo o que concerne àquele componente e deve ser vinculado explicitamente às funções criadas dentro da classe, através da sintaxe 
        this.minhaFuncao = this.minhaFuncao.bind(this) no construtor do componente;
    Funções que tratam eventos devem ser vinculadas aos seus respectivos elementos com {this.minhaFuncao} ou {() => this.minhaFuncao('Meu parametro') .
    É possível ler o estado de um componente via this.state , é possível definir um estado inicial no construtor com uma atribuição a this.state e deve-se atualizar tal estado somente com a função this.setState .
    A atualização do estado é assíncrona e, por isso, se se quiser garantir que uma atualização ocorrerá depois da outra, tal atualização deverá ser definida via callback passada à função this.setState , no formato 
        this.setState((estadoAnterior, props) => novoEstado)
