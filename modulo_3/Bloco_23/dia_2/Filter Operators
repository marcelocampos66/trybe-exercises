*Operadores de Comparação*

Os operadores de comparação servem para que você execute queries comparando os valores de campos dos documentos de uma coleção.

Os operadores seguem uma sintaxe padrão que é composta por um subdocumento, como no exemplo abaixo:

    { <campo>: { <operador>: <valor> } }

Os operadores são identificados pelo prefixo $


Operador $lt

O operador $lt seleciona os documentos em que o valor do campo filtrado é menor do que (<) o valor especificado. Sintaxe:

    db.inventory.find({ qty: { $lt: 20 } })

Ou seja, essa query selecionará todos os documentos na coleção inventory cujo valor do campo qty é menor do que 20.

/////

Operador $lte

O operador $lte seleciona os documentos em que o valor do campo filtrado é menor ou igual (<=) ao valor especificado. Sintaxe:

    db.inventory.find({ qty: { $lte: 20 } })

Ou seja, essa query selecionará todos os documentos na coleção inventory cujo valor do campo qty é menor ou igual a 20.

/////

Operador $gt

O operador $gt seleciona os documentos em que o valor do campo filtrado é maior do que (>) o valor especificado. Sintaxe:

    db.inventory.find({ qty: { $gt: 20 } })

Ou seja, essa query selecionará todos os documentos na coleção inventory cujo valor do campo qty é maior do que 20.

/////

Operador $gte

O operador $gte seleciona os documentos em que o valor do campo filtrado é maior ou igual (>=) ao valor especificado. Sintaxe:

    db.inventory.find({ qty: { $gte: 20 } })

Ou seja, essa query selecionará todos os documentos na coleção inventory cujo valor do campo qty é maior ou igual a 20.

/////

Operador $eq

O operador $eq seleciona os documentos em que o valor do campo filtrado é igual ao valor especificado. Esse operador é equivalente ao filtro { campo: <valor> } e não tem nenhuma diferença de performance.

    db.inventory.find({ qty: { $eq: 20 } })

A query acima é exatamente equivalente a:

    db.inventory.find({ qty: 20 })

Usar $eq é apenas uma maneira de explicitar o operador.

/////

Operador $ne

Esse operador é o contrário do anterior. Ao utilizar o $ne , o MongoDB seleciona os documentos em que o valor do campo filtrado não é igual ao valor especificado. Sintaxe:

    db.inventory.find({ qty: { $ne: 20 } })

Ou seja, a query acima retorna os documentos da coleção inventory cujo valor do campo qty é diferente de 20.

/////

Operador $in

A query abaixo retorna todos os documentos da coleção inventory em que o valor do campo qty é 5 ou 15. (E embora você também possa executar essa consulta utilizando o operador $or)

    db.inventory.find({ qty: { $in: [ 5, 15 ] } })

/////

Operador $nin

O operador $nin seleciona os documentos em que o valor do campo filtrado não é igual ao especificado no array , ou o campo não existe.

    db.inventory.find( { qty: { $nin: [ 5, 15 ] } } )

Essa query seleciona todos os documentos da coleção inventory em que o valor do campo qty é diferente de 5 e 15.

/////

FIXACAO:

1 - Selecione e faça a contagem dos restaurantes presentes nos bairros (campo borough ) Queens , Staten Island e Bronx.

    db.restaurants.find({ borough: { $in: ["Queens", "Staten Island", "Bronx"] } }).count();

2 - Selecione e faça a contagem dos restaurantes que não possuem culinária (campo cuisine ) do tipo American.

    db.restaurants.find({ cuisine: { $ne: "American" } }).count();

3- Selecione e faça a contagem dos restaurantes que possuem avaliação (campo rating ) maior ou igual a 8.

    db.restaurants.find({ rating: { $gte: 8 } }).count();

4- Selecione e faça a contagem dos restaurantes que possuem avaliação menor que 4.

    db.restaurants.find({ rating: { $lt: 4 } }).count();

5- Selecione e faça a contagem dos restaurantes que não possuem as avaliações 5 , 6 e 7.

    db.restaurants.find({ rating: { $nin: [5, 6, 7] } }).count();



*Operadores Lógicos*

Assim como os operadores de comparação, os operadores lógicos também podem ser utilizados nos mesmos métodos para leitura e atualização de documentos do MongoDB . Eles também ajudam a elaborar queries mais complexas, juntando cláusulas para retornar documentos que satisfaçam os filtros.

Operador $not
Sintaxe:

    { campo: { $not: { <operador ou expressão> } } }

O operador $not executa uma operação lógica de NEGAÇÃO no < operador ou expressão > especificado e seleciona os documentos que não correspondam ao < operador ou expressão > . Isso também inclui os documentos que não contêm o campo. Exemplo:

    db.inventory.find({ price: { $not: { $gt: 1.99 } } })

Ou seja, essa query seleciona todos os documentos na coleção inventory em que o valor do campo price é menor ou igual a 1.99 (em outras palavras, não é maior que 1.99 ).

/////

Operador $or

O operador $or executa a operação lógica OU em um array de uma ou mais expressões e seleciona os documentos que satisfaçam ao menos uma das expressões. Sintaxe:

    { $or: [{ <expression1> }, { <expression2> }, ... , { <expressionN> }] }

Exemplo:

    db.inventory.find({ $or: [{ qty: { $lt: 20 } }, { price: 10 }] })

Essa query seleciona todos os documentos da coleção inventory em que o valor do campo qty é menor do que 20 ou o valor do campo price é igual a 10.

/////

Operador $nor

Esse operador seleciona os documentos em que todas essas expressões falhem , ou seja, seleciona os documentos em que todas as expressões desse array sejam falsas.

    { $nor: [ { <expressão1> }, { <expressão2> }, ...  { <expressãoN> } ] }

Exemplo:

    db.inventory.find({ $nor: [{ price: 1.99 }, { sale: true }] })

Essa query retorna todos os documentos da coleção inventory que:

    - Contêm o campo price com valor diferente de 1.99 e o campo sale com valor diferente de true ;
    - Ou contêm o campo price com valor diferente de 1.99 e não contêm o campo sale ;
    - Ou não contêm o campo price e contêm o campo sale com valor diferente de true ;
    - Ou não contêm o campo price e nem o campo sale .

/////

Operador $and

O operador $and executa a operação lógica E num array de uma ou mais expressões e seleciona os documentos que satisfaçam todas as expressões no array. Sintaxe:

    { $and: [{ <expressão1> }, { <expressão2> } , ... , { <expressãoN> }] }

Exemplo:

    db.inventory.find({
        and: [
            { price: { $ne: 1.99 } },
            { price: { $exists: true } }
        ]
    })

Essa query seleciona todos os documentos da coleção inventory em que o valor do campo price é diferente de 1.99 e o campo price existe.

/////

*Múltiplas expressões especificando o mesmo operador*

    db.inventory.find({
        and: [
                {
        or: [
                        { price: { $gt: 0.99, $lt: 1.99 } }
                    ]
                },
                {
        or: [
                        { sale : true },
                        { qty : { $lt : 20 } }
                    ]
                }
            ]
    })

Essa query seleciona todos os documentos da coleção inventory em que o valor do campo price é maior que 0.99 ou menor que 1.99 , e o valor do campo sale é igual a true ou o valor do campo qty é menor do que 20 . Ou seja, essa expressão é equivalente a (price > 0.99 ou price < 1.99) e (sale = true ou qty < 20).

/////

FIXACAO

1- Selecione e faça a contagem dos restaurantes que não possuem avaliação menor ou igual a 5 , essa query também deve retornar restaurantes que não possuem o campo avaliação.

    db.restaurants.find({ rating: { $not: { $lte: 5 } } }).count();

2- Selecione e faça a contagem dos restaurante em que a avaliação seja maior ou igual a 6 , ou restaurantes localizados no bairro Brooklyn.

    db.restaurants.find({ $or: [{ rating: { $gte: 6 } }, { borough: "Brooklyn" }] }).count();

3- Selecione e faça a contagem dos restaurantes localizados nos bairros Queens , Staten Island e Broklyn e possuem avaliação maior que 4.

    db.restaurants.find({ $and: [{ borough: { $in: ["Queens", "Staten Island", "Brooklyn"] } }, { rating: { $gt: 4 } }] }).count();

4- Selecione e faça a contagem dos restaurantes onde nem o campo avaliação seja igual a 1 , nem o campo culinária seja do tipo American.

    db.restaurants.find({ $nor: [{ rating: { $eq: 1 } }, { cuisine: "American" }] }).count();    

5- Selecione e faça a contagem dos resturantes em que a avaliação seja maior que 6 ou menor que 10 , e esteja localizado no bairro Brooklyn ou não possuem culinária do tipo Delicatessen .

    db.restaurants.find({ $and: [
        { $or: [{ rating: { $gt: 6 } },{ rating: { $lt: 10 } }] },
        { $or: [{ borough: "Brooklyn" }, {cuisine: { $ne: "Delicatessen" }}] },
    ] }).count();

/////

Operador $exists

Sintaxe:

    { campo: { $exists: <boolean> } }

Quando o <boolean> é verdadeiro ( true ), o operador $exists encontra os documentos que contêm o campo , incluindo os documentos em que o valor do campo é null . Se o <boolean> é falso ( false ), a query retorna somente os documentos que não contêm o campo.

Exemplo:

    db.inventory.find({ qty: { $exists: true } })

Essa query retorna todos os documentos da coleção inventory em que o campo 'qty' existe.
Também pode combinar operadores:

    db.inventory.find({ qty: { $exists: true, $nin: [ 5, 15 ] } })

/////

*Método sort()*

Sintaxe:

    db.colecao.find().sort({ "campo": "1 ou -1"})

Quando existe a necessidade de ordenar os documentos por algum campo o método sort se mostra muito útil. Usando um valor positivo, 1 , como valor do campo os documentos da query são ordenados de forma crescente ou alfabética (Ele também ordena por campos com strings ). Em complemento, usando um valor negativo, -1 , os documentos de saída em ordem decrescente ou contra alfabética.

Exemplo:

    db.example.insertMany([
        { "name": "Mandioquinha Frita", "price": 14 },
        { "name": "Litrão", "price": 8 },
        { "name": "Torresmo", "price": 16 }
    ])


    db.example.find().sort({ "price": 1 }).pretty()


    // Resultado esperado:
    {
            "_id" : ObjectId("5f7dd0582e2738debae74d6c"),
            "name" : "Litrão",
            "price" : 8
    }
    {
            "_id" : ObjectId("5f7dd0582e2738debae74d6b"),
            "name" : "Mandioquinha Frita",
            "price" : 14
    }
    {
            "_id" : ObjectId("5f7dd0582e2738debae74d6d"),
            "name" : "Torresmo",
            "price" : 16
    }

/////

FIXACAO

1- Ordene alfabeticamente os restaurantes pelo nome (campo name ).
    
    db.restaurants.find().sort({ name: 1 });

2- Ordene os restaurantes de forma descrescente baseado nas avaliações.

    db.restaurants.find().sort({ rating: -1 });

/////


*REMOVENDO DOCUMENTOS*

Para remover documentos de uma coleção, temos dois métodos que são utilizados para níveis de remoção diferentes: o db.colecao.deleteOne() e o db.colecao.deleteMany() . Os dois métodos aceitam um documento como parâmetro, que pode conter um filtro simples ou até mesmo um conjunto de expressões para atender aos critérios de seleção.


db.colecao.deleteOne()

Esse método remove apenas um documento, que deve satisfazer o critério de seleção, mesmo que múltiplos outros documentos também se enquadrem no critério de seleção. Se nenhum valor for passado como parâmetro, a operação removerá o primeiro documento.

Exemplo:
Remove o primeiro documento da coleção inventory em que o campo status é igual a D:

    db.inventory.deleteOne({ status: "D" });


db.colecao.deleteMany()

Esse método remove todos os documentos que satisfaçam o critério de seleção.

Exemplo:
Remove todos os documentos da coleção inventory em que o campo status é igual a A:

    db.inventory.deleteMany({ status : "A" });

Para remover todos os documentos da coleção, basta não passar parâmetros para o método db.colecao.deleteMany():

    db.inventory.deleteMany({});

/////

FIXACAO

1- Remova o primeiro restaurante que possua culinária do tipo Ice Cream, Gelato, Yogurt, Ices.

    db.restaurants.deleteOne({ cuisine: "Ice Cream, Gelato, Yogurt, Ices" } });

2- Remova todos os restaurantes que possuem culinária do tipo American.

    db.restaurants.deleteMany({ cuisine: "American" });

db.dropDatabase() === DELETA A DATABASE;
