**Camada de Controller e Service**

Essas duas camadas novas, geralmente são utilizadas de forma complementar à camada de Model.

Essas duas camadas são, respectivamente, responsáveis por (1) receber e tratar os dados da requisição e (2) aplicar as regras de negócio da aplicação antes que qualquer comunicação com o banco seja realizada. Dessa forma, o Model precisa fazer menos coisas, o que quer dizer que temos uma arquitetura que delimita mais as responsabilidades de cada camada, de forma que, caso precisemos alterar uma parte do código, a quantidade de lugares em que precisaremos mexer é menor, visto que camada tem sua responsabilidade bem delimitada.


*A camada dos Controllers*

Desde o primeiro dia que estudou Express, você já vem usando o principal componente de sua camada de controllers: Os middlewares .

Por isso que a camada dos controllers é a primeira camada numa API. É nela onde os dados da requisição serão recebidos e tratados, pra depois serem passados para as próximas camadas.

O controller recebe as requisições e então consulta o service , enviando na resposta aquilo que o service retornar, que pode ser uma mensagem de erro, em caso de falha, ou as informações pedidas, em caso de sucesso.

Ao se comunicar com o service , o controller deve passar apenas as informações necessárias, sendo assim não é uma boa prática passar toda a request para o service , as informações devem ser extraídas e então apenas o que for necessário para determinada ação deve ser transferido.


*A camada dos Services*

Até agora, temos dito que regras de negócio ficam no modelo. E isso é verdade em outros padrões arquiteturais.
Mas é comum que, à medida que projetos vão crescendo, os modelos vão ficando cada vez maiores e mais complexos, pois vão acumulando cada vez mais regras de negócio.
Por isso, é comum vermos uma nova camada sendo adicionada em projetos que exigem uma lógica de negócio um pouco mais complexa e, principalmente, em APIs.
Essa camada é a Camada dos Services . Ela fica situada entre as camadas de controller e model e é responsável pela nossa lógica de negócio. O modelo, então, passa a ser responsável somente pelo acesso a dados.

Uma boa camada de serviço:

    - Deve centralizar acesso a dados e funções externas. Exemplo: chamar um evento que dispara uma mensagem no Slack;
    - Deve abstrair lógica de negócio complexa do seu modelo;
    - Não deve ter nenhum tipo de informação sobre o acesso a camada de dados. Exemplo: não ter nenhuma query SQL;
    - Não deve receber nada relacionado ao HTTP, seja o request ou o response . O controller deve mandar apenas o necessário para o service.


Utilizando o joi

Instalacao:

    npm i joi

Como utilizar:

    const Joi = require('joi');

    const create = rescue(async (req, res, next) => {
      // Utilizamos o Joi para descrever o objeto que esperamos
      // receber na requisição. Para isso, chamamos Joi.object()
      // passando um objeto com os campos da requisição e suas descrições
      const { error } = Joi.object({
        // Deve ser uma string (.string()) não vazia (.not().empty()) e é obrigatório (.required())
        firstName: Joi.string().not().empty().required(),
        // Não é obrigatório mas, caso seja informado, deve ser uma string não vazia
        middleName: Joi.string().not().empty(),
        // Deve ser uma string não vazia e é obrigatório
        lastName: Joi.string().not().empty().required(),
      })
        // Por fim, pedimos que o Joi verifique se o corpo da requisição se adequa a essas regras
        .validate(req.body);

      // Caso exista algum problema com a validação, iniciamos o fluxo de erro e interrompemos o middleware.
      if (error) {
        return next(error);
      }

      // Caso não haja erro de validação, prosseguimos com a criação do usuário
      const { firstName, middleName, lastName } = req.body;

      const newAuthor = await service.create(firstName, middleName, lastName);

      // Caso haja erro na criação do autor, iniciamos o fluxo de erro
      if (newAuthor.error) return next(newAuthor.error);

      // Caso esteja tudo certo, retornamos o status 201 Created, junto com as informações
      // do novo autor
      return res.status(201).json(newAuthor);
    });


Exemplo de service:

const create = async (name, user) => {
    if(!name) return {code: 422, message: "Nome eh obrigatorio"}
    if(!user) return {code: 422, message: "Usuario eh obrigatorio"}

    const task = await Task.create(name, user);

    return { code: 200, task };
};



