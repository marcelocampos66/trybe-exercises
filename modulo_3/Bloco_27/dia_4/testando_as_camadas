**Testando as Camadas**

*Desenvolvimento guiado por testes*

O TDD é um processo de desenvolvimento de software que visa o feedback rápido e a garantia do funcionamento da aplicação de acordo com o que foi definido.
Relembrando o processo, podemos pensar que ele funciona como pequenos ciclos onde:

    1- Partimos da escrita de testes a partir dos requisitos;
    2- Em seguida, implementamos a funcionalidade;
    3- E, por último, fazemos os ajustes necessários para que testes e implementação estejam alinhados.

Concluindo o ciclo, iniciamos um novo para uma nova funcionalidade.


*Testes Unitários (Unit Tests)*

Exemplo de estruturacao das pastas:


    └── controllers
    │   └── movieController.js
    └── services
    │   └── movieService.js
    └── models
    │   └── movieModel.js
    └── tests
    │   ├── controllers
    │   │   └── movieController.test.js
    │   ├── services
    │   │   └── movieService.test.js
    │   └── models
    │       └── movieModel.test.js
    └── index.js

Criamos um arquivo de teste para a entidade movie para cada camada do MSC. Dessa forma, conseguiremos testar unitariamente cada uma.

Continuamos usando o mocha, chai e sinon:

    npm install -D mocha chai sinon

Por último, vamos adicionar o script de teste no package.json .
Habitualmente, podemos executar todos os testes contidos numa pasta utilizando o comando mocha <suaPastaDeTestes> --recursive , assim como podemos também definir um padrão de arquivos de teste, como mocha .<suaPastaDeTestes>/**/*.test.js , que executará todos os arquivos com final test.js dentro da sua pasta de testes.
Para esse dia, vamos utilizar um pequeno artifício com o intúito de facilitar a execução de testes específicos. Nesse caso, utilizaremos o comando mocha ./tests/**/*$NAME*.test.js :

    ...
      "scripts": {
        "test": "mocha ./tests/**/*$NAME*.test.js --exit"
      },
    ...

Dessa forma, podemos executar o comando npm test para validar todos os nossos testes, ou, utilizar uma variável de ambiente NAME para definir um arquivo específico: NAME=nomeDoArquivo npm test.

*Model e testes*

A ideia é subirmos uma versão especial do BD que queremos em memória, dessa forma, ele não persistira nenhuma informação em disco (sem realizar IO) e ao final de cada teste podemos limpá-lo. Como essa versão do banco está em memória, ao finalizar os testes, as informações também serão apagadas. Instalacao:

    npm install -D mongodb-memory-server

Como só utilizaremos esse pacote em tempo de desenvolvimento para os testes, é importante adicionarmos a flag -D ou --save-dev.

Iremos então iniciar um server do banco em memória e fazer um stub da conexão conectando nesse server:

tests/models/movieModel.test.js

    const sinon = require('sinon');
    const { expect } = require('chai');
    const { MongoClient } = require('mongodb');
    const { MongoMemoryServer } = require('mongodb-memory-server');

    const MoviesModel = require('../../models/movieModel');

    describe('Insere um novo filme no BD', () => {
      const payloadMovie = {
        title: 'Example Movie',
        directedBy: 'Jane Dow',
        releaseYear: 1999,
      };

        before(async () => {

          const DBServer = new MongoMemoryServer();
          const URLMock = await DBServer.getUri();

          const connectionMock = await MongoClient
            .connect(URLMock, {
              useNewUrlParser: true,
              useUnifiedTopology: true
            });

          sinon.stub(MongoClient, 'connect').resolves(connectionMock);

        });

      after(() => {
        MongoClient.connect.restore();
      });

      describe('quando é inserido com sucesso', async () => {

        it('retorna um objeto', async () => {
          const response = await MoviesModel.create(payloadMovie);

          expect(response).to.be.a('object');
        });

        it('tal objeto possui o "id" do novo filme inserido', async () => {
          const response = await MoviesModel.create(payloadMovie);

          expect(response).to.have.a.property('id');
        });

      });

    });


*Service e testes*

Relembrando o papel dessa camada, podemos definí-la como responsável pela lógica de negócio, sendo acessada pelo controller e acessando o model , ou seja, ficando situada entre as duas camadas.

services/movieService.js

    const MoviesModel = require('../models/movieModel');

    const isValid = (title, directedBy, releaseYear) => {
      if (!title || typeof title !== 'string') return false;
      if (!releaseYear || typeof releaseYear !== 'number') return false;
      if (!directedBy || typeof directedBy !== 'string') return false;

      return true;
    };

    const create = async ({ title, directedBy, releaseYear }) => {
      const isMovieValid = isValid(title, directedBy, releaseYear);

      if (!isMovieValid) return false;

      const { id } = await MoviesModel
        .create({ title, directedBy, releaseYear });

      return {
        id,
      };
    };

    module.exports = {
      create,
    };

Vamos então isolar nosso service, removendo a dependência dele do Model. Para isso, podemos fazer um stub:

tests/services/movieService.test.js

    const sinon = require('sinon');
    const { expect } = require('chai');

    const MoviesModel = require('../../models/movieModel');
    const MoviesService = require('../../services/movieService');

    describe('Insere um novo filme no BD', () => {
      describe('quando o payload informado não é válido', async () => {
        const payloadMovie = {};

        it('retorna um boolean', async () => {
          const response = await MoviesService.create(payloadMovie);

          expect(response).to.be.a('boolean');
        });

        it('o boolean contém "false"', async () => {
          const response = await MoviesService.create(payloadMovie);

          expect(response).to.be.equal(false);
        });

      });

      describe('quando é inserido com sucesso', async () => {
        const payloadMovie = {
          title: 'Example Movie',
          directedBy: 'Jane Dow',
          releaseYear: 1999,
        };

        before(() => {
          const ID_EXAMPLE = '604cb554311d68f491ba5781';

          sinon.stub(MoviesModel, 'create')
            .resolves({ id: ID_EXAMPLE });
        });

        // Restauraremos a função `create` original após os testes.
        after(() => {
          MoviesModel.create.restore();
        });

        it('retorna um objeto', async () => {
          const response = await MoviesService.create(payloadMovie);

          expect(response).to.be.a('object');
        });

        it('tal objeto possui o "id" do novo filme inserido', async () => {
          const response = await MoviesService.create(payloadMovie);

          expect(response).to.have.a.property('id');
        });

      });
    });


*Controllers e testes*

Essa camada recebe as requisições dos clientes, preparando o input e o output da pessoa usuária de acordo com sua comunicação com a camada de Service.

Dessa forma, nos testes devemos contemplar qual a resposta para o cliente apropriado em cada cenário, qual o status e o body em cada resposta:
Ao chamar o método create do controller movieController esperamos:

1- Quando o payload informado não é válido:
    - Retornar o código de status 400 - Bad Request;
    - Retornar a mensagem Dados inválidos.
2- Quando o payload informado é válido:
    - Retornar o código de status 201 - Created ;
    - Retornar a mensagem Filme criado com sucesso!.

Percebam que os testes do controller tem uma particularidade em sua implementação. Isso acontece porque diferente das outras camadas, o controller não possui funções simples que retornam um resultado qualquer, mas sim middlewares que funcionam a partir dos objetos req , res , next e error .
Dessa forma, para conseguirmos testar, precisaremos passar um input a partir do req e validar o output a partir do res , validando se os devidos métodos foram chamados e com os parâmetros esperados.

controllers/movieController.js

const MoviesService = require('../services/movieService');

    const create = async (req, res) => {
      const { title, directedBy, releaseYear } = req.body;

      const movie = await MoviesService
      .create({ title, directedBy, releaseYear });

      if (!movie) {
        return res
          .status(400)
          .send('Dados inválidos');
      }

      /*
        Perceba que `middlewares`, ao invés de executar um `return` padrão,
        como outras funções, vão, na maior parte das vezes, devolver as
        funções passadas por parâmetro, através dos objetos `req, res, next`.

        No nosso caso, estamos utilizando os métodos `status()` e `send()`,
        de `res` (response) para escrever/devolver um valor para a
        requisição daquele `end-point`.
      */
      res
        .status(201)
        .send('Filme criado com sucesso!');
    };

    module.exports = {
      create,
    };

Aqui precisamos também isolar nosso controller das demais camadas:

tests/controllers/movieController.test.js

    const sinon = require('sinon');
    const { expect } = require('chai');

    const MoviesService = require('../../services/movieService');
    const MoviesController = require('../../controllers/movieController');

    describe('Ao chamar o controller de create', () => {
      describe('quando o payload informado não é válido', async () => {
        const response = {};
        const request = {};

        before(() => {
          request.body = {};

          response.status = sinon.stub()
            .returns(response);
          response.send = sinon.stub()
            .returns();

          /*
            Perceba que nosso stub também simula os comportamentos do `service`,
            dessa forma, conseguimos testar o comportamento do controller de
            maneira isolada.

            Aqui, todos os testes que requisitarem o serviço, devem receber
            retorno `false`.
          */
          sinon.stub(MoviesService, 'create')
            .resolves(false);
        });

        // Restauraremos a função `create` original após os testes.
        after(() => {
          MoviesService.create.restore();
        });

        it('é chamado o status com o código 400', async () => {
          await MoviesController.create(request, response);

          expect(response.status.calledWith(400)).to.be.equal(true);
        });

        it('é chamado o send com a mensagem "Dados inválidos"', async () => {
          await MoviesController.create(request, response);

          expect(response.send.calledWith('Dados inválidos')).to.be.equal(true);
        });

      });

      describe('quando é inserido com sucesso', async () => {
        const response = {};
        const request = {};

        before(() => {
          request.body = {
            title: 'Example Movie',
            directedBy: 'Jane Dow',
            releaseYear: 1999,
          };

          response.status = sinon.stub()
            .returns(response);
          response.send = sinon.stub()
            .returns();

          /*
            Aqui, todos os testes que requisitarem o serviço, devem receber
            retorno `true`.
          */
          sinon.stub(MoviesService, 'create')
            .resolves(true);
        })

        // Restauraremos a função `create` original após os testes.
        after(() => {
          MoviesService.create.restore();
        });

        it('é chamado o status com o código 201', async () => {
          await MoviesController.create(request, response);

          expect(response.status.calledWith(201)).to.be.equal(true);
        });

        it('é chamado o send com a mensagem "Filme criado com sucesso!"', async () => {
          await MoviesController.create(request, response);

          expect(response.send.calledWith('Filme criado com sucesso!')).to.be.equal(true);
        });

      });
    });

/////////////////

    let DBServer
    let connectionMock;
    
    before(async () => {
      
      DBServer = await MongoMemoryServer.create();
      const URLMock = DBServer.getUri();

      connectionMock = await MongoClient
        .connect(URLMock, {
          useNewUrlParser: true,
          useUnifiedTopology: true
        });

      sinon.stub(MongoClient, 'connect').resolves(connectionMock);

      await connectionMock.db('exercises').collection('movies').insertOne(payloadMovie);
    });

    after(async () => {
      await connectionMock.close();
      MongoClient.connect.restore();
      await DBServer.stop();
    });

//////////////
