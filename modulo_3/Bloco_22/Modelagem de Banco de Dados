O problema - Catálogo de Álbuns

Suponha que seja necessário armazenar informações de álbuns musicais para formar um catálogo. Para isso seria criado um banco de dados, e nesse banco de dados teriamos o que chamamos de tabela. Pensando em nosso exemplo, poderiamos ter uma tabela chamada albuns_musicais , onde as informações de cada álbum a serem armazenadas na respectiva tabela seriam:
    - Título;
    - Preço;
    - Estilo Musical;
    - Canções.
Poderiamos também, dentro do mesmo banco de dados, ter outra tabela que armazenaria informações do artista, visto que cada artista pode produzir vários álbuns, criando assim um relacionamento entre tabelas.


entidades, atributos e relacionamentos:
    - Entidade 1: `Álbum`;
    - Entidade 2: `Artista`;
    - Entidade 3: `Estilo Musical`;
    - Entidade 4: `Canção`.

atributos:
    - Álbum: `album_id`, `titulo`, `preco`, `estilo_id` e `artista_id`;
    - Artista: `artista_id` e `nome`;
    - Estilo Musical: `estilo_id` e `nome`;
    - Canção: `cancao_id`, `nome` e `album_id`

Os relacionamentos identificados foram:
    - Um artista pode possuir um ou mais álbuns;
    - Um estilo musical pode estar contido em um ou mais álbuns;
    - Um álbum pode possuir uma ou mais canções.

Considerando as entidades Álbum , Artista , Estilo Musical e Canção , foi construído o seguinte diagrama:

        1 : Artista         Produz ===>    N : Album
        1 : Estilo Musical  Possui ===>    N : Album
        1 : Album           Possui ===>    N : Cançao



/////

**Database Design - Como modelar um banco de dados**

Existem alguns passos a serem seguidos durante a modelagem e criação de um banco de dados. Um fluxo bastante comum nesse processo consiste em:

    1 - Identificar as entidades , atributos e relacionamentos com base na descrição do problema;
    2 - Construir um diagrama entidade-relacionamento para representar as entidades encontradas no passo 1;
    3 - Criar um banco de dados para conter suas tabelas;
    4 - Criar e modelar tabelas tendo o diagrama do passo 2 como base.


*1) Identificando entidades, atributos e relacionamentos*

Entidades:

São uma representação de algo do mundo real dentro do banco de dados. Elas normalmente englobam toda uma ideia e são armazenadas em formato de tabelas em um banco de dados.

Se sua interpretação foi diferente, não se preocupe. A maneira como você modelará o banco de dados varia de acordo com a sua escala.
    - Entidade 1: `Álbum`;
    - Entidade 2: `Artista`;
    - Entidade 3: `Estilo Musical`;
    - Entidade 4: `Canção`.


Atributos:

Os atributos são tudo aquilo que pode ser usado para descrever algo. Por exemplo, uma entidade pessoa pode ter nome, altura, peso e idade.

Se sua interpretação foi diferente, não se preocupe, você praticará mais hoje para que melhore essa percepção.
    - Álbum: `album_id`, `titulo`, `preco`, `estilo_id` e `artista_id`;
    - Artista: `artista_id` e `nome`;
    - Estilo Musical: `estilo_id` e `nome`;
    - Canção: `cancao_id`, `nome` e `album_id`.


Relacionamentos:

Os relacionamentos servem para representar como uma entidade deve estar ligada com outra(s) no banco de dados. Há três tipos de relacionamentos possíveis em um banco de dados, que são:

- Relacionamento Um para Um (1..1):

Nesse tipo de relacionamento, uma linha da Tabela A deve possuir apenas uma linha correspondente na Tabela B e vice-versa.

        EMPREGADO       Pagamento
        id              pagamentoID
        nome            salarioMensal
        pagamentoID

Apesar de ser possível inserir essas informações em apenas uma tabela, esse tipo de relacionamento é usado normalmente quando se quer dividir as informações de uma tabela maior em tabelas menores, evitando que as tabelas tenham dezenas de colunas.


- Relacionamento Um para Muitos ou Muitos para Um (1..N):

Esse é um dos tipos mais comuns de relacionamento. Em cenários assim, uma linha na Tabela A pode ter várias linhas correspondentes na Tabela B , mas uma linha da Tabela B só pode possuir uma linha correspondente na Tabela A .
Por exemplo, uma categoria pode estar ligada a vários livros, embora um livro deva possuir apenas uma categoria.

        Livro           Categoria
        id              categoriaID
        nome            nomeCategoria
        categoriaID


- Relacionamento Muitos para Muitos (N..N):
O relacionamento muitos para muitos acontece quando uma linha na Tabela A pode possuir muitas linhas correspondentes na Tabela B e vice-versa. Veja o exemplo abaixo:

        ATOR        FILME_ATOR      FILME
        atorID      atorID          filmeID
        nomeAto     filmeID         nomeFilme

Esse tipo de relacionamento pode ser visto também como dois relacionamentos um para muitos ligados por uma tabela intermediária, como é o caso da tabela filme_ator . Pode-se chamar essa tabela intermediária de tabela de junção . Ela é usada para guardar informações de como as tabelas se relacionam entre si. Desta maneira, quando se quer demonstrar que um filme pode contar com vários atores e também que os atores podem atuar em vários filmes, surge a necessidade de um relacionamento muitos para muitos.



2) Construindo um diagrama entidade-relacionamento

No segundo passo, será construído um diagrama entidade-relacionamento para representar as entidades encontradas no passo 1.
Agora é preciso montar um diagrama de relacionamento básico que demonstra como uma entidade é relacionada com a outra, usando o modelo EntidadeA + verbo + EntidadeB .
Considerando as entidades Álbum , Artista , Estilo Musical e Canção , foi construído o seguinte diagrama:

        1 : Artista         Produz ===>    N : Album
        1 : Estilo Musical  Possui ===>    N : Album
        1 : Album           Possui ===>    N : Cançao

O que você deve fazer quando estiver construindo seu próprio banco de dados é entender quantas vezes uma entidade pode se relacionar com uma outra, para, a partir disso, você poder criar esse primeiro diagrama, como o do exemplo acima, que mostra como as entidades estão relacionadas entre si.

*Montando um diagrama mais detalhado*

Para diagramas ER mais detalhados, deve-se incluir o nome das tabelas, suas chaves primárias e estrangeiras, suas colunas e seus relacionamentos.
Curiosidade: Por questão de convenções e boas práticas na criação de tabelas, não serão usados acentos ou espaços entre os nomes das tabelas.
Lembre-se: Existem várias maneiras de se modelar um banco de dados. Então, caso pense diferente do modelo abaixo, entenda que existem diversas formas de se resolver um mesmo problema.

- Ponto importante sobre diagramas ER
A ideia de um diagrama ER é prover uma representação gráfica para a estrutura de seu banco de dados, descrevendo suas entidades com seus atributos e como elas se relacionam. Essa visualização pode te ajudar tanto a criar e modelar seu banco de dados quanto a entender se sua modelagem precisa ser alterada ou se houve algum erro ao pensar na organização de suas entidades. Com esse diagrama você consegue pensar um pouco mais antes de começar a escrever as queries para criar as tabelas.



3) Criando um banco de dados para conter suas tabelas

Ao lidar com a criação e gerenciamento de um banco de dados, você precisará conhecer os seguintes comandos:

    -- Cria um banco de dados com o nome especificado.
    CREATE DATABASE nome_do_banco_de_dados;

    -- Sinônimo de CREATE DATABASE, também cria um banco de dados.
    CREATE SCHEMA nome_do_banco_de_dados;

    -- Verifica se o banco de dados ainda não existe.
    -- Essa verificação é comumente utilizada junto ao CREATE DATABASE para evitar
    -- a tentativa de criar um banco de dados duplicado, o que ocasionaria um erro.
    IF NOT EXISTS nome_do_banco_de_dados;

    -- Lista todos os bancos de dados existentes.
    SHOW DATABASES;

    -- Define o banco de dados ativo para uso no momento.
    USE nome_do_banco_de_dados;

Os comandos CREATE DATABASE ou CREATE SCHEMA fazem a mesma coisa, no entanto eles normalmente são utilizados em conjunto com o comando IF NOT EXISTS . Essa verificação é feita para evitar a tentativa de criar um banco de dados duplicado, o que ocasionaria um erro.



4) Criando e modelando tabelas de acordo com um diagrama ER

E para isso é necessário entender quais são os principais tipos de dados no MySQL

- BOOLEANOS
    BOOL - pode receber 1 ou 0, o valor padrao é nulo.

- CARACTERES
    TAMANHO FIXO = CHAR(tamnho) EX: CHAR(5) -- Ele ocupa todo o espaço reservado
    TAMANHO VARIAVEL = VARCHAR(tamanho) EX: CHAR(10) -- Ele ocupa so o espaço preenchido

- NÚMEROS
    VALORES EXATOS INTEIROS
        TINYINT = 0 A 255 UNSIGNED OU -128 A 127 SIGNED
            UNSIGNED = PERMITE ARMAZENAR SOMENTE VALORES POSITIVOS
            SIGNED = PERMITE ARMAZENAR VALORES NEGATIVOS E POSITIVOS
        SMALLINT
        MEDIUMINT
        INT
        BIGINT
    VALORES EXATOS COM PRECISAO DECIMAL
        DECIMAL = PERMITE DEFINIR QUANTIDADE MAXIMA DE NUMEROS E PRECISAO -- EX: DECIMAL(5,2) = 199.99
        FLOAT/REAL = TEM A PRECISAO DE UMA CASA DECIMAL -- EX: 10.9
        DOUBLE = TEM A PRECISAO DE DUAS CASAS DECIMAIS -- EX: 19.90

- TEMPORAIS
    DATE = ARMAZENA VALORES NO PADRAO YYYY-MM-DD
    TIME = ARMAZENA VALORES NO PADRAO HH:MM:SS
    YEAR = ARMAZENA VALORES O ANO ENTRE 1901 E 2155
    DATETIME = JUNTA O DATE E O TIME NO PADRAO YYYY-MM-DD HH:MM:SS
    TIMESTAMP = IGUAL AO DATETIME MAS TAMBEM OPERA COM BASE EM FUSO HORARIO QUE PODE SER DEFINIDO NO SERVIDOR


*O que é uma primary key e foreign key*

PRIMARY KEY = uma chave primaria é uma coluna ou grupo de colunas usadas para identificar uma linha em uma tabela (identificador unico)

Chave primária composta - A chave primária é uma restrição, ou constraint que serve para identificar uma linha e garantir que não haverá dados redundantes em uma tabela. Uma chave primária pode ser formada com uma única coluna ou um grupo de colunas de uma tabela . Ou seja, por mais que só possamos ter uma única chave primária por tabela, essa chave pode ser simples (apenas uma coluna) ou composta (conjunto de colunas).

Exemplo de como criar uma tabela declarando a CONSTRAINT PRIMARY KEY simples:

    DROP SCHEMA IF EXISTS Brasil;
    CREATE SCHEMA Brasil;
    USE Brasil;

    CREATE TABLE cidades(
        cidade VARCHAR(100) NOT NULL,
        estado VARCHAR(10) NOT NULL,
        populacao INTEGER,
        CONSTRAINT PRIMARY KEY(cidade)
    );

Exemplo de como criar uma tabela declarando a CONSTRAINT PRIMARY KEY composta:

    DROP SCHEMA IF EXISTS Brasil;
    CREATE SCHEMA Brasil;
    USE Brasil;

    CREATE TABLE cidades(
        cidade VARCHAR(100) NOT NULL,
        estado VARCHAR(10) NOT NULL,
        populacao INTEGER,
        CONSTRAINT PRIMARY KEY(cidade, estado)
    );

    INSERT INTO cidades(cidade, estado, populacao)
    VALUES('Rio Claro','SP',185421),
          ('Rio Claro','RJ',17216);


FOREIGN KEY = uma chave estrangeira é uma coluna ou grupo de colunas em uma tabela, que identifica unicamente uma linha em outra tabela

Exemplo de declarar uma FOREIGN KEY:

    CREATE TABLE filme_ator(
        AtorId INTEGER,
        FilmeId INTEGER,
        CONSTRAINT PRIMARY KEY(AtorId, FilmeId)
        FOREIGN KEY (AtorId) REFERENCES Actor (Atorid)
        FOREIGN KEY (Filme) REFERENCES Actor (Filmeid)
    );



*Como criar uma tabela no MySQL - RESUMO*

- Sintaxe para criar DATABASE
    
    CREATE DATABASE IF NOT EXISTS nome_do_banco_de_dados;

- Sintaxe para criar TABLE

    CREATE TABLE nome_da_tabela(
        id INT PRIMARY KEY AUTO_INCREMENT
        nome VARCHAR(50)
    ) ENGINE=InnoDB;

    Outro exemplo:

    USE albuns;
    CREATE TABLE album(
    album_id INT PRIMARY KEY AUTO_INCREMENT,
    artist_id INT NOT NULL,
    titulo VARCHAR(100) NOT NULL,
    preco DECIMAL(5, 2) NOT NULL,
    estilo_id INT NOT NULL,
    FOREIGN KEY (artist_id) REFERENCES artista(artista_id),
    FOREIGN KEY (estilo_id) REFERENCES estilomusical(estilo_id)
    ) ENGINE=InnoDB;

DEVEMOS PRIMEIRO CRIAR AS TABELAS PAI PARA DEPOIS CRIAR AS TABELAS FILHO E CRIAR SUAS RELACOES

    CREATE TABLE estilomusical(
    estilo_id INT PRIMARY KEY AUTO_INCREMENT,
    nome VARCHAR(50) NOT NULL
    ) ENGINE=InnoDB;

    /////

    DROP SCHEMA IF EXISTS Albuns;
    CREATE SCHEMA Albuns;
    USE Albuns;

    CREATE TABLE artista(
        artista_id INT PRIMARY KEY AUTO_INCREMENT,
        nome VARCHAR(50) NOT NULL
    );

    CREATE TABLE estilo_musical(
        estilo_id INT PRIMARY KEY AUTO_INCREMENT,
        nome VARCHAR(50) NOT NULL
    );

    CREATE TABLE album(
        album_id INT PRIMARY KEY AUTO_INCREMENT,
        titulo VARCHAR(50) NOT NULL,
        preço INT NOT NULL,
        estilo_id INT NOT NULL,
        artista_id INT NOT NULL,
        FOREIGN KEY (estilo_id) REFERENCES estilo_musical (estilo_id),
        FOREIGN KEY (artista_id) REFERENCES artista (artista_id)
    );

    CREATE TABLE cancao(
        cancao_id INT PRIMARY KEY AUTO_INCREMENT,
        nome VARCHAR(50) NOT NULL,
        album_id INT NOT NULL,
        FOREIGN KEY (album_id) REFERENCES album (album_id)
    );



