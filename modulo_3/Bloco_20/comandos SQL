*** PARA ACESSAR O SQL ***

rode o comando e em seguida insira a senha do banco de dados.

    mysql -u root -p

É possível ver todos os bancos de dados que estão instalados atualmente digitando o seguinte comando:

    SHOW DATABASES;

*** COMANDOS MAIS COMUNS ***

Por convenção, utilizamos as palavras chave do SQL em caixa alta para diferenciar das indicações de tabelas e colunas. Ah, é fundamental utilizar o ; (ponto e vírgula) ao final de cada comando SQL, caso contrário ele não irá funcionar.

- O comando USE serve pra definir a referência do banco de dados que será utilizado na query:

    USE nome_do_banco_de_dados_que_quero_conectar;

    -- EX:
    USE sakila;
    SELECT country_id, city FROM city;

- Uma outra forma de fazer referência ao banco, sem ter que rodar o USE é no formato banco_de_dados.tabela:

    SELECT * FROM banco_de_dados.tabela;

    -- EX: SELECT * FROM trybe.students;
    -- EX: SELECT concat(first_name, ' ', last_name ) AS 'Nome Completo' FROM sakila.actor;

- Para retornar todas as tabelas inicializadas no seu server:

    SHOW TABLES;

- Visualizar estrutura de uma tabela:

    DESCRIBE nome_da_tabela;

    -- EX: DESCRIBE students;

- Criar um banco de dados:

    CREATE DATABASE nome_do_banco_de_dados;

    - EX: CREATE DATABASE trybe;

- Esse comando serve para criar novas tabelas em uma base de dados.

    CREATE TABLE

- Usamos o DISTINCT para selecionar todos os valores diferentes da selecao(selecionar todos exceto os repetidos).

    DISTINCT

    Ex: SELECT DISTINCT Country FROM Customers;
    Ex: SELECT COUNT(DISTINCT Country) FROM Customers // Aqui o count eh realizado no resultado do distinct

- Usamos o COUNT para contar as quantidades de ocorrencias de um determinado dado.

    COUNT
    EX: SELECT COUNT(*) FROM sakila.actor;
    EX: SELECT COUNT(DISTINCT first_name) FROM sakila.actor;
    EX: SELECT COUNT(district) FROM sakila.address WHERE district = 'Alberta';

- Usamos o LIMIT para limitar o numero de retornos da nossa query.

    EX: SELECT * FROM sakila.rental LIMIT 20;

- Para pular uma certa quantidade de linhas do seu resultado, você pode usar o comando OFFSET.

    EX: SELECT * FROM sakila.rental LIMIT 10 OFFSET 3;

- Podemos usar o comando ORDER BY para ordenar de acordo com alguma regra ou simplesmente usa-lo para ordernar em ordem alfabetica.

    Ex: SELECT * FROM sakila.address ORDER BY address; // Usamos ASC para ordem Ascendente e DESC para ordem decrescente.
    EX: SELECT * FROM sakila.address ORDER BY address DESC, district;

- Usamos WHERE para filtrar dados em um comando SQL. Essa cláusula deve ser seguida por uma expressão lógica.

    WHERE
    
    EX:
    SELECT descricao, precocusto FROM produtos WHERE descricao = "Caderno Escolar"
    EX:
    SELECT * FROM sakila.film WHERE rating = 'G' OR rating = 'PG' OR rating = 'PG-13';
    SELECT * FROM sakila.film WHERE rating = 'G' AND rating = 'PG-13';
    SELECT * FROM sakila.rental WHERE return_date IS NULL;
    SELECT * FROM sakila.address WHERE address2 IS NOT NULL;
    SELECT first_name FROM sakila.customer WHERE active <> 1 AND store_id = 2 AND first_name NOT LIKE 'KENNETH' ORDER BY first_name;
    SELECT title, description, release_year, replacement_cost FROM sakila.film WHERE rating <> 'NC-17' AND replacement_cost > 18 ORDER BY replacement_cost DESC, title LIMIT 100;
    SELECT COUNT(first_name) FROM sakila.customer WHERE store_id = 1 AND active = 1;
    SELECT * FROM sakila.customer WHERE active = 0 AND store_id = 1;
    SELECT title FROM sakila.film WHERE rating = 'NC-17' ORDER BY rental_rate, title LIMIT 50;
       
    SELECT * FROM sakila.payment WHERE amount = 0.99 OR amount = 2.99 AND staff_id = 2; // a query é executada como se tivesse os seguintes parênteses: amount = 0.99 OR (amount = 2.99 AND staff_id = 2)
    
    SELECT * FROM sakila.paymentWHERE (amount = 0.99 OR amount = 2.99) AND staff_id = 2; // a expressão dentro dos parênteses é avaliada, e todos os resultados que satisfazem a condição são retornados. Na sequência, a expressão do lado direito do AND é avaliada.

- Usamos o LIKE para buscar por meio de uma sequência específica de caracteres, como no exemplo acima. Além disso, dois "coringas", ou modificadores, são normalmente usados com o LIKE :
    % - O sinal de percentual, que pode representar zero, um ou múltiplos caracteres
    _ - O underscore (às vezes chamado de underline, no Brasil), que representa um único caractere

    SELECT * FROM sakila.film WHERE title NOT LIKE 'academy%'; // o uso do % quer dizer nessa query 'que comece com a palavra academy'
    SELECT * FROM sakila.film WHERE title LIKE '%don'; // o uso do % quer dizer nessa query 'que termine com a palavra don'
    SELECT * FROM sakila.film WHERE title LIKE '%plu%'; // Encontra qualquer resultado que contém "plu"
    SELECT * FROM sakila.film WHERE title LIKE 'p%r'; // Encontra qualquer resultado que inicia com "p" e finaliza com "r"
    SELECT * FROM sakila.film WHERE title LIKE '_C%'; // Encontra qualquer resultado em que o segundo caractere da frase é "C"
    SELECT * FROM sakila.film WHERE title LIKE '________'; // Encontra qualquer resultado em que o título possui exatamente 8 caracteres
    SELECT * FROM sakila.film WHERE title LIKE 'E__%'; // Encontra todas as palavras com no mínimo 3 caracteres e que iniciam com E

    SELECT * FROM film WHERE title LIKE '%ace%';
    SELECT * FROM sakila.film WHERE description LIKE '%china';
    SELECT * FROM sakila.film WHERE description LIKE '%girl%' AND title LIKE '%lord' LIMIT 2;
    SELECT * FROM sakila.film WHERE title LIKE '___gon%';
    SELECT * FROM sakila.film WHERE title LIKE '___gon%' AND description LIKE '%documentary%';
    SELECT * FROM sakila.film WHERE title LIKE '%academy' OR title LIKE 'mosquito%';
    SELECT * FROM sakila.film WHERE description LIKE '%monkey%' AND description LIKE '%sumo%' LIMIT 6;

- O IN eh utiliazado da seguinte maneira:

    // SEM O IN
    SELECT * FROM sakila.actor
    WHERE first_name = 'PENELOPE'
    OR first_name = 'NICK'
    OR first_name = 'ED'
    OR first_name = 'JENNIFER';

    // COM O IN
    SELECT * FROM sakila.actor WHERE first_name IN ('PENELOPE','NICK','ED','JENNIFER');

    //Pode ser utilizado para numeros tbm:
    SELECT * FROM sakila.customer WHERE customer_id IN (1, 2, 3, 4, 5);

    //De uma forma geral a Sintaxe do uso do IN:
    SELECT * FROM banco_de_dados
    WHERE coluna IN (valor1, valor2, valor3, valor4, ..., valorN);

    // OU
    SELECT * FROM banco_de_dados
    WHERE coluna IN (expressão);

- Operador BETWEEN eh uma opção quando queremos trabalhar com faixas de resultados:

    EX:
    SELECT title, length FROM sakila.film WHERE length BETWEEN 50 AND 120;

    //Com strings:
    SELECT * FROM sakila.language WHERE name BETWEEN 'Italian' AND 'Mandarin' ORDER BY name;

    // com datas, basta que você digite o valor no formato padrão da data, que é YYYY-MM-DD HH:MM:SS , sendo os valores de horas, minutos e segundos opcionais.
    SELECT rental_id, rental_date FROM sakila.rental WHERE rental_date BETWEEN '2005-05-27' AND '2005-07-17';

- FIXACAO DO USO DO IN OU BETWEEN:

    SELECT first_name, last_name, email FROM sakila.customer WHERE last_name IN('hicks', 'crawford', 'henry', 'boyd', 'mason', 'morales', 'kennedy') ORDER BY first_name;
    SELECT email FROM sakila.customer WHERE address_id BETWEEN 172 AND 176 ORDER BY email;
    SELECT COUNT(*) FROM sakila.payment WHERE payment_date BETWEEN '2005-05-01' AND '2005-08-01';
    SELECT title, release_year, rental_duration FROM sakila.film WHERE rental_duration BETWEEN 3 AND 6 ORDER BY rental_duration DESC, title;
    SELECT title, rating FROM sakila.film WHERE rating IN('G', 'PG', 'PG-13') ORDER BY title LIMIT 500;

- Tipos de dados temporais, Date e DateTime

    DATE - Possui apenas data, no formato YYYY-MM-DD na faixa de 1001-01-01 até 9999-12-31
    DATETIME - Possui data e tempo, no formato YYYY-MM-DD HH:MM:SS com a faixa de 1000-01-01 00:00:00 até 9999-12-31 23:59:59 .

    // Achar por Data:
    // Usando a função DATE(coluna_do_tipo_date):
    SELECT * FROM sakila.payment WHERE DATE(payment_date) = '2005-07-31';

    // Usando LIKE:
    // Encontra todos pagamentos deste dia, ignorando horas, minutos e segundos:
    SELECT * FROM sakila.payment WHERE payment_date LIKE '2005-07-31%';

    // Encontra um pagamento com dia e hora exatos:
    SELECT * FROM sakila.payment WHERE payment_date LIKE '2005-08-20 00:30:52';

    // Usando BETWEEN:
    // Encontra pagamentos especificando um valor mínimo e um valor máximo para a data:
    SELECT * FROM sakila.payment WHERE payment_date BETWEEN '2005-05-26 00:00:00' AND '2005-05-27 23:59:59';

    SELECT DATE(payment_date) FROM sakila.payment; -- YYYY-MM-DD
    SELECT YEAR(payment_date) FROM sakila.payment; -- Ano
    SELECT MONTH(payment_date) FROM sakila.payment; -- Mês
    SELECT DAY(payment_date) FROM sakila.payment; -- Dia
    SELECT HOUR(payment_date) FROM sakila.payment; -- Hora
    SELECT MINUTE(payment_date) FROM sakila.payment; -- Minuto
    SELECT SECOND(payment_date) FROM sakila.payment; -- Segundo

    // Fixacao
    SELECT COUNT(*) FROM sakila.payment WHERE DATE(payment_date) = '2005-05-25';
    SELECT COUNT(*) FROM sakila.payment WHERE payment_date BETWEEN '2005-07-01' AND '2005-08-22';
    SELECT 
    YEAR(rental_date) AS Ano,
    MONTH(rental_date) AS Mes,
    DAY(rental_date) AS Dia,
    HOUR(rental_date) AS Hora,
    MINUTE(rental_date) AS Minutos,
    SECOND(rental_date) AS Segundos
    FROM
        sakila.rental
    WHERE
        rental_id = 10330;
    SELECT * FROM sakila.payment WHERE DATE(payment_date) = '2005-07-28' AND HOUR(payment_date) >= 22;
    
- O comando INSERT serve para inserir dados no banco de dados.
- Com o comando é possível fazer isto de maneira mais dinâmica e dentro da própria aplicação, sem precisar recorrer a códigos PHP para inserir dados.

    INSERT
    Inserindo uma unica linha:
    Ex: INSERT INTO nome_da_tabela (coluna1, coluna2) VALUES ('valor_coluna1', 'valor_coluna2');

    Inserindo varias linhas de uma vez:
    Ex: INSERT INTO nome_da_tabela (coluna1, coluna2) VALUES ('valor_1','valor_2'), ('valor_3','valor_4'), ('valor_5','valor_6');

    Podemos ignorar os erros durante a inserção usando o INSERT IGNORE. Colunas com o auto_increment terao seus valores gerados automaticamente valor + 1.

    INSERT SELECT (Inserindo dados de uma outra tabela)
    Ex: 
    INSERT INTO tabelaA (coluna1, coluna2)
    SELECT tabelaB.coluna1, tabelaB.coluna2
    FROM tabelaB
    WHERE tabelaB.nome_da_coluna <> 'algumValor'
    ORDER BY tabelaB.coluna_de_ordenacao;

    FIXACAO:
    INSERT INTO sakila.actor (first_name, last_name) SELECT first_name, last_name FROM sakila.customer LIMIT 5;
    INSERT INTO sakila.category (name) VALUES ('categoria1'), ('categoria2'), ('categoria3');
    INSERT INTO sakila.store (manager_staff_id, address_id) VALUES (3, 3);

- O comando UPDATE serve para facilitar a atualização de dados nas tabelas.
- Esse recurso é bastante simples e de grande utilidade, já que torna possível a alteração de diversos registros com poucos cliques.

    UPDATE

    UPDATE nome_da_tabela SET propriedade_a_ser_alterada = 'novo valor para coluna' WHERE alguma_condicao;

    Ex:
    UPDATE MARCELO.Filme
    SET AnoLancamento = 2018
    WHERE FilmeId = 3;
    
    UPDATE sakila.staff SET first_name = 'Rannveig' WHERE first_name = 'Ravein';

    mais de uma coluna ao mesmo tempo:
    UPDATE sakila.staff SET first_name = 'Rannveig', last_name = 'Jordan' WHERE staff_id = 4;

    /////

    podemos fazer uma atualização em massa.
    Opção 1 - Incluindo a lista de condições fixas:
    UPDATE sakila.actor SET first_name = 'JOE' WHERE actor_id IN (1,2,3);

    Opção 2 - Especificando como cada entrada será alterada individualmente:

    UPDATE sakila.actor
    SET first_name = (
    CASE actor_id WHEN 1 THEN 'JOE' -- se actor_id = 1, alterar first_name para 'JOE'
                  WHEN 2 THEN 'DAVIS' -- se actor_id = 2, alterar first_name para 'DAVIS'
                  WHEN 3 THEN 'CAROLINE' -- se actor_id = 3, alterar first_name para 'CAROLINE'
    END);

    /////

    Fazendo um UPDATE de forma sequencial:
    UPDATE nome_da_tabela
    SET coluna1 = valor1, coluna2 = valor2
    [WHERE condições]
    [ORDER BY expressao [ ASC | DESC ]]
    [LIMIT quantidade_resultados];

    -- Exemplo:
    UPDATE sakila.staff
    SET password = 'FavorResetarSuaSenha123'
    WHERE active = 1
    ORDER BY last_update
    LIMIT 2;

    /////

    FIXACAO:
    UPDATE sakila.actor SET first_name = 'JULES' WHERE first_name = 'JULIA';
    UPDATE sakila.category SET name = 'Science Fiction' WHERE name = 'Sci-Fi';
    UPDATE sakila.film SET rental_rate = 25 WHERE (length > 100) AND rating IN('G', 'PG', 'PG-13') AND replacement_cost > 20;
    UPDATE sakila.film 
    SET 
        rental_rate = (CASE
            WHEN length BETWEEN 0 AND 100 THEN 10
            WHEN length > 100 THEN 20
        END);

    /////

Uma curiosidade sobre o UPDATE e o DELETE no MySQL Server é que, por padrão, existe uma configuração chamada safe updates mode que só vai te permitir executá-los caso eles incluam quais IDs devem ser modificados. Então, caso você tente fazer a query abaixo, ela não funcionaria por não incluir o ID. Para evitar essa restrição, rode o seguinte comando em uma janela de query dentro do MySQL Workbench sempre que abri-lo para desabilitar essa funcionalidade, antes de executar seus comandos de UPDATE ou DELETE:

    SET SQL_SAFE_UPDATES = 0;

Para quem está ainda está se familiarizando com o MySQL, o --safe-updates (ou - -i-am-a-dummy , sim, é uma propriedade real do MySQL) pode ser uma configuração segura para utlizar operadores de alteração de dados. Ele é útil para casos em que você tenha emitido um comando UPDATE ou DELETE , mas esquecido de incluir WHERE para indicar quais linhas devem ser modificadas, evitanto que a query atualize ou exclua todas as linhas da tabela.
O --safe-updates exige que você inclua um valor chave (key value), por exemplo os ids (lembrando que os valores da coluna id de uma tabela são do tipo KEY ) dos itens selecionados para executar o UPDATE ou o DELETE . Essa camada de segurança é importante em bancos reais executando em ambientes de produção e ajuda a prevenir acidentes. Este modo também restringe querys SELECT que produzem resultados muito grandes, com uma quantidade excessiva de linhas.
A opção --safe-updates exige que o mysql execute a seguinte instrução ao se conectar ao servidor:

    SET sql_safe_updates=1, sql_select_limit=1000, max_join_size=1000000;

Quando ocorre um erro de --safe-updates , a mensagem de erro inclui o primeiro diagnóstico que foi produzido, para fornecer informações sobre o motivo da falha. Por exemplo, a mensagem pode indicar que o UPDATE esta sendo executado com um operador WHERE que não se refere a uma coluna do tipo KEY (veja a imagem abaixo), nesse caso voce pode desabilitar o --safe-updates , ou utilizar uma coluna KEY como referência do seu operador WHERE . Lembre-se que ler e interpretar os erros pode ajudar na sua solução!

    /////

- Como o próprio nome já denuncia, o comando DELETE serve para excluir um ou mais registros de uma base de dados.

    DELETE
    Ex:
    DELETE FROM banco_de_dados.tabela WHERE coluna = 'valor'; -- O WHERE é opcional. Porém, sem ele, todas as linhas da tabela seriam excluídas.
    DELETE FROM MARCELO.Filme WHERE FilmeId = 7;

    FIXACAO:
    DELETE FROM sakila.film_text WHERE description LIKE '%saga%';
    TRUNCATE sakila.film_actor; // 'maneira mais performatica'
    TRUNCATE sakila.film_category;

    /////

Meu DELETE não foi permitido...
Caso haja relações entre as tabelas ( primary key e foreign keys ) e existam restrições aplicadas a elas, ao executar o DELETE ocorrerá uma ação de acordo com a restrição que tiver sido imposta na criação da foreign key . Essas restrições podem ser as seguintes:

    -- Rejeita o comando DELETE.
    ON DELETE NO ACTION;

    -- Rejeita o comando DELETE.
    ON DELETE RESTRICT;

    -- Permite a exclusão dos registros da tabela pai, e seta para NULL os registros da tabela filho.
    ON DELETE SET NULL;

    -- Exclui a informação da tabela pai e registros relacionados.
    ON DELETE CASCADE;

Se tem certeza absoluta de que quer excluir os registros de uma tabela de uma maneira mais rápida, para efeitos de testes ou necessidade, o TRUNCATE é mais rápido que o DELETE . A função principal e única do TRUNCATE é de limpar (excluir todos os registros) de uma tabela, não sendo possível especificar o WHERE . Por isso, o TRUNCATE só pode ser usado nesse cenário.

    TRUNCATE banco_de_dados.tabela;
