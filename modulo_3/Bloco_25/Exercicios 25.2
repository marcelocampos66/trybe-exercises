Você continuará utilizando o banco de dados erp do dia anterior. Nos exercícios 1 a 8 , você utilizará o mesmo pipeline . A ideia é começar com um pipeline pequeno e ir adicionando estágios à medida que você for evoluindo nos exercícios.

Exercício 1 : Utilize uma combinação das expressões aritméticas e adicione um campo chamado idade à coleção clientes . Algumas dicas:

    - arredonde para baixo o valor da idade;
    - calcule a idade usando a diferença entre a data corrente e a data de nascimento;
    - dia é igual a 86400000 milissegundos.

RESPOSTA:

    const daysInMiliseconds = (days = 0) => days * 24 * 60 * 60000;

    db.clientes.aggregate([
      {
        $addFields: {
          idade: {
            $floor: {
              $divide: [
                { $subtract: [new Date(), "$dataNascimento"] },
                { $multiply: [daysInMiliseconds(1), 365] },
              ]
            },
          },
        },
      },
    ]);

Exercício 2 : Utilizando o novo campo idade , conte quantos clientes têm entre 18 e 25 anos.

    const daysInMiliseconds = (days = 0) => days * 24 * 60 * 60000;

    db.clientes.aggregate([
      {
        $addFields: {
          idade: {
            $floor: {
              $divide: [
                { $subtract: [new Date(), "$dataNascimento"] },
                { $multiply: [daysInMiliseconds(1), 365] },
              ]
            },
          },
        },
      },
      {
        $match: { idade: { $gte: 18, $lte: 25 } },
      },
      {
        $count: "clientesComIdadeEntre18e25",
      },
    ]);

Exercício 3 : Remova os estágios $count e $match do exercício anterior e adicione um estágio no pipeline que coloque as compras do cliente no campo compras.

    const daysInMiliseconds = (days = 0) => days * 24 * 60 * 60000;

    db.clientes.aggregate([
      {
        $addFields: {
          idade: {
            $floor: {
              $divide: [
                { $subtract: [new Date(), "$dataNascimento"] },
                { $multiply: [daysInMiliseconds(1), 365] },
              ]
            },
          },
        },
      },
      {
        $lookup: {
          from: "vendas",
          localField: "clienteId",
          foreignField: "clienteId",
          as: "compras"
        }
      },
    ]);

Exercício 4 : Selecione TODOS os clientes que compraram entre Junho de 2019 e Março de 2020.

    const daysInMiliseconds = (days = 0) => days * 24 * 60 * 60000;

    db.clientes.aggregate([
      {
        $addFields: {
          idade: {
            $floor: {
              $divide: [
                { $subtract: [new Date(), "$dataNascimento"] },
                { $multiply: [daysInMiliseconds(1), 365] },
              ]
            },
          },
        },
      },
      {
        $lookup: {
          from: "vendas",
          localField: "clienteId",
          foreignField: "clienteId",
          as: "compras"
        }
      },
      {
        $match: {
          "compras.dataVenda": { $gte: ISODate('2019-06-01'), $lte: ISODate('2020-03-31') },
        },
      },
    ]);

Exercício 5 : Confira o número de documentos retornados pelo pipeline com o método itcount() . Até aqui, você deve ter 486 documentos sendo retornados.

    const daysInMiliseconds = (days = 0) => days * 24 * 60 * 60000;

    db.clientes.aggregate([
      {
        $addFields: {
          idade: {
            $floor: {
              $divide: [
                { $subtract: [new Date(), "$dataNascimento"] },
                { $multiply: [daysInMiliseconds(1), 365] },
              ]
            },
          },
        },
      },
      {
        $lookup: {
          from: "vendas",
          localField: "clienteId",
          foreignField: "clienteId",
          as: "compras"
        }
      },
      {
        $match: {
          "compras.dataVenda": { $gte: ISODate('2019-06-01'), $lte: ISODate('2020-03-31') },
        },
      },
    ]).itcount();

Exercício 6 : Deixe apenas os top 10 clientes com mais compras nesse período.

    const daysInMiliseconds = (days = 0) => days * 24 * 60 * 60000;

    db.clientes.aggregate([
      {
        $addFields: {
          idade: {
            $floor: {
              $divide: [
                { $subtract: [new Date(), "$dataNascimento"] },
                { $multiply: [daysInMiliseconds(1), 365] },
              ]
            },
          },
        },
      },
      {
        $lookup: {
          from: "vendas",
          localField: "clienteId",
          foreignField: "clienteId",
          as: "compras"
        }
      },
      {
        $match: {
          "compras.dataVenda": { $gte: ISODate('2019-06-01'), $lte: ISODate('2020-03-31') },
        },
      },
      {
        $addFields: { quantidadeDeCompras: { $size: "$compras" } },
      },
      { $sort: { quantidadeDeCompras: -1 } },
      { $limit: 10 },
    ]);

Exercício 7 : Para esses clientes, adicione um campo chamado compras.valorComDesconto em todas as compras do período, aplicando 10% de desconto sobre o valor total da compra ( valorTotal ).

    const daysInMiliseconds = (days = 0) => days * 24 * 60 * 60000;

    db.clientes.aggregate([
      {
        $addFields: {
          idade: {
            $floor: {
              $divide: [
                { $subtract: [new Date(), "$dataNascimento"] },
                { $multiply: [daysInMiliseconds(1), 365] },
              ]
            },
          },
        },
      },
      {
        $lookup: {
          from: "vendas",
          localField: "clienteId",
          foreignField: "clienteId",
          as: "compras"
        }
      },
      {
        $match: {
          "compras.dataVenda": { $gte: ISODate('2019-06-01'), $lte: ISODate('2020-03-31') },
        },
      },
      {
        $addFields: { quantidadeDeCompras: { $size: "$compras" } },
      },
      { $sort: { quantidadeDeCompras: -1 } },
      { $limit: 10 },
      { $unwind: "$compras" },
      {
        $addFields: {
          "compras.valorComDesconto": {
            $multiply: ["$compras.valorTotal", 0.9],
          },
        },
      },
    ]);

Exercício 8 : Ainda nesse pipeline , descubra os 5 estados com mais compras.

    const daysInMiliseconds = (days = 0) => days * 24 * 60 * 60000;

    db.clientes.aggregate([
      {
        $addFields: {
          idade: {
            $floor: {
              $divide: [
                { $subtract: [new Date(), "$dataNascimento"] },
                { $multiply: [daysInMiliseconds(1), 365] },
              ]
            },
          },
        },
      },
      {
        $lookup: {
          from: "vendas",
          localField: "clienteId",
          foreignField: "clienteId",
          as: "compras"
        }
      },
      {
        $match: {
          "compras.dataVenda": { $gte: ISODate('2019-06-01'), $lte: ISODate('2020-03-31') },
        },
      },
      {
        $addFields: { quantidadeDeCompras: { $size: "$compras" } },
      },
      { $sort: { quantidadeDeCompras: -1 } },
      { $limit: 10 },
      { $unwind: "$compras" },
      {
        $addFields: {
          "compras.valorComDesconto": {
            $multiply: ["$compras.valorTotal", 0.9],
          },
        },
      },
      {
        $group: {
          _id: "$endereco.uf",
          quantidadePorUf: { $sum: 1 },
        },
      },
      { $sort: { quantidadePorUf: -1 } },
      { $limit: 5 },
    ]);

Exercício 9 : Descubra o cliente que mais consumiu QUEIJO PRATO . Retorne um documento com a seguinte estrutura:

{
  "nomeCliente": "NOME",
  "uf": "UF DO CLIENTE",
  "totalConsumido": 100
}

RESPOSTA:

    db.vendas.aggregate([
      {
        $match: { "itens.nome": "QUEIJO PRATO" },
      },
      {
        $unwind: "$itens",
      },
      {
        $match: { "itens.nome": "QUEIJO PRATO" },
      },
      {
        $group: {
          _id: "$clienteId",
          totalConsumido: { $sum : "$itens.quantidade" },
        },
      },
      {
        $sort: { totalConsumido: -1 }
      },
      { $limit: 1 },
      {
        $lookup: {
          from: 'clientes',
          localField: '_id',
          foreignField: 'clienteId',
          as: 'cliente',
        }
      },
      {
        $unwind: "$cliente",
      },
      {
        $project: { nomeCliente: "$cliente.nome", UF: "$cliente.endereco.uf", totalConsumido: 1, _id: 0 },
      },
    ]);

Exercício 10 : Selecione todas as vendas do mês de Março de 2020 , com status EM SEPARACAO. Acrescente um campo chamado dataEntregaPrevista com valor igual a três dias após a data da venda. Retorne apenas os campos clienteId , dataVenda e dataEntregaPrevista.

    const daysInMiliseconds = (days = 0) => days * 24 * 60 * 60000;

    db.vendas.aggregate([
      {
        $match: {
          status: "EM SEPARACAO",
          dataVenda: { $gte: ISODate('2020-03-01'), $lte: ISODate('2020-03-31') },
        },
      },
      {
        $addFields: {
          dataEntregaPrevista: {
            $add: ["$dataVenda", daysInMiliseconds(3)],
          },
        },
      },
      {
        $project: {
          _id: 0,
          clienteId: 1,
          dataVenda: 1,
          dataEntregaPrevista: 1,
        },
      },
    ]);


Bônus

Exercício 11 : Calcule a diferença absoluta em dias entre a data da primeira entrega prevista e a última, considerando o pipeline do exercício 10.

    const daysInMiliseconds = (days = 0) => days * 24 * 60 * 60000;

    db.vendas.aggregate([
      {
        $match: {
          status: "EM SEPARACAO",
          dataVenda: { $gte: ISODate('2020-03-01'), $lte: ISODate('2020-03-31') },
        },
      },
      {
        $addFields: {
          dataEntregaPrevista: {
            $add: ["$dataVenda", daysInMiliseconds(3)],
          },
        },
      },
      {
        $project: {
          _id: 0,
          clienteId: 1,
          dataVenda: 1,
          dataEntregaPrevista: 1,
        },
      },
      {
        $group: {
          _id: null,
          primeiraData: { $min: "$dataEntregaPrevista" },
          ultimaData: { $max: "$dataEntregaPrevista" },
        },
      },
      {
        $project: {
          _id: 0,
          valorAbsoluto: {
            $round: [
              {
                $divide: [
                  {
                    $abs: { $subtract: ["$primeiraData", "$ultimaData"] },
                  },
                  daysInMiliseconds(1),
                ],
              },
            ],
          },
        },
      },
    ]);

