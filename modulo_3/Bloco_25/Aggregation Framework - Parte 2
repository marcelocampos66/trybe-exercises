**Aggregation Framework - Parte 2**

*Aplicando condições ao Join com $lookup*

Para isso, existem mais dois parâmetros, ambos opcionais:

    - let : define as variáveis que serão utilizadas no estágio pipeline dentro do $lookup . É necessário porque o estágio pipeline não consegue acessar diretamente os campos dos documentos de entrada, então esses campos precisam ser definidos previamente e transformados em variáveis;

    - pipeline : define as condições ou o pipeline que será executado na coleção de junção. Se você quiser todos os documentos da coleção de junção, é só especificá-lo como vazio ( [] ). 

Collections para exemplo:

orders:

    { _id: 1, item: "almonds", price: 12, ordered: 2 },
    { _id: 2, item: "pecans", price: 20, ordered: 1 },
    { _id: 3, item: "cookies", price: 10, ordered: 60 }

warehouses:

    { _id: 1, stock_item: "almonds", warehouse: "A", instock: 120 },
    { _id: 2, stock_item: "pecans", warehouse: "A", instock: 80 },
    { _id: 3, stock_item: "almonds", warehouse: "B", instock: 60 },
    { _id: 4, stock_item: "cookies", warehouse: "B", instock: 40 },
    { _id: 5, stock_item: "cookies", warehouse: "A", instock: 80 },

A operação a seguir junta todos os documentos da coleção orders com a coleção warehouse através do campo item se a quantidade em estoque ( instock ) for suficiente para cobrir a quantidade vendida ( ordered ). Os documentos que dão match são colocados no campo stockdata.

    db.orders.aggregate([
      {
        $lookup: {
          from: "warehouses",
          let: { order_item: "$item", order_qty: "$ordered" },
          pipeline: [
            {
              $match: {
                $expr: {
                  $and: [
                    { $eq: [ "$stock_item",  "$$order_item" ] },
                    { $gte: [ "$instock", "$$order_qty" ] }
                  ]
                }
              }
            },
            { $project: { stock_item: 0, _id: 0 } }
          ],
          as: "stockdata"
        }
      }
    ]);

Note que, dentro do estágio pipeline , temos um operador $match que utiliza uma expressão ( $expr ). Esta, por sua vez, utiliza o operador $and . Dentro do $and , são utilizados operadores de igualdade ( $eq ) e de comparação ( $gte ). O símbolo $ é utilizado para se referir aos campos da coleção warehouse (a coleção de junção), enquanto $$ se refere às variáveis definidas no estágio let (os campos da coleção orders ). Os campos _id e stock_item da coleção de join ( warehouse ) são excluídos com o uso do operador $project.

Resultado:

    {
      "_id" : 1,
      "item" : "almonds",
      "price" : 12,
      "ordered" : 2,
      "stockdata" : [
        {
          "warehouse" : "A",
          "instock" : 120
        },
        {
          "warehouse" : "B",
          "instock" : 60
        }
      ]
    }
    {
      "_id" : 2,
      "item" : "pecans",
      "price" : 20,
      "ordered" : 1,
      "stockdata" : [
        {
          "warehouse" : "A",
          "instock" : 80
        }
      ]
    }
    {
      "_id" : 3,
      "item" : "cookies",
      "price" : 10,
      "ordered" : 60,
      "stockdata" : [
        {
          "warehouse" : "A",
          "instock" : 80
        }
      ]
    }

FIXACAO:

1- Selecione todos os clientes com as suas respectivas transações feitas;

    db.clients.aggregate([
      {
        $lookup: {
          from: 'transactions',
          localField: 'name',
          foreignField: 'from',
          as: 'transactions'
        }
      },
    ]);

2- Selecione quatro clientes com as suas respectivas transações recebidas;

    db.clients.aggregate([
      { $limit: 4 },
      {
        $lookup: {
          from: 'transactions',
          let: { clientName: "$name" },
          pipeline: [
            {
              $match: { $expr: { $eq: ["$from", "$$clientName"] } },
            },
          ],
          as: 'transactions',
        },
      },
    ]);

3- Selecione todos os cliente do estado da "Florida" e suas respectivas transações recebidas.

    db.clients.aggregate([
      { $match: { State: "Florida" } },
      {
        $lookup: {
          from: 'transactions',
          let: { clientName: "$name" },
          pipeline: [
            {
              $match: { $expr: { $eq: ["$from", "$$clientName"] } },
            },
          ],
          as: 'transactions',
        },
      },
    ]);


*Expressão $add*

Com a expressão $add , é possível somar valores numéricos ou datas. Se um dos argumentos for do tipo date , o outro argumento será tratado como milissegundos e adicionado à data.

Para exemplo, documentos na coleção sales:

    { _id: 1, item: "abc", price: 10, fee: 2, date: ISODate("2014-03-01T08:00:00Z") },
    { _id: 2, item: "jkl", price: 20, fee: 1, date: ISODate("2014-03-01T09:00:00Z") },
    { _id: 3, item: "xyz", price: 5,  fee: 0, date: ISODate("2014-03-15T09:00:00Z") }

Utilizando a expressão $add no estágio $project , você pode criar um novo campo com o valor total somando os campos price e fee:

    db.sales.aggregate([
      { $project: { item: 1, total: { $add: ["$price", "$fee"] } } }
    ]);

Resultado:

    { "_id" : 1, "item" : "abc", "total" : 12 }
    { "_id" : 2, "item" : "jkl", "total" : 21 }
    { "_id" : 3, "item" : "xyz", "total" : 5 }

Para valores do tipo date , um dos argumentos sempre será tratado como milissegundos. Imagine que você queira adicionar 3 dias ao valor do campo date . Você consegue fazer de duas maneiras. A primeira é passar em um dos argumentos o número equivalente a 3 dias em milissegundos ( 2,592e+8 ). A segunda é criar uma expressão que devolva esse número:

    db.sales.aggregate([
      { $project: { item: 1, billing_date: { $add: ["$date", 2.592e+8] } } }
    ]);

    db.sales.aggregate([
      { $project: { item: 1, billing_date: { $add: ["$date", 3 * 24 * 60 * 60000] } } }
    ]);

Note que as duas operações retornam o mesmo valor para o novo campo billing_date .


*Expressão $subtract*

Com a expressão subtract , podemos subtrair dois valores numéricos para retornar a diferença entre eles, ou duas datas para retornar a diferença entre elas em milissegundos. O segundo argumento sempre será subtraído do primeiro. Documentos para Exemplo:

    {
      _id: 1,
      item: "abc",
      price: 10,
      fee: 2,
      discount: 5,
      date: ISODate("2014-03-01T08:00:00Z")
    },
    {
      _id: 2,
      item: "jkl",
      price: 20,
      fee: 1,
      discount: 2,
      date: ISODate("2014-03-01T09:00:00Z")
    }

Em uma única operação no estágio $project , podemos montar uma expressão um pouco mais complexa, utilizando $add para calcular o total e o $subtract para aplicar um desconto no subtotal:

    db.sales.aggregate([
      {
        $project: {
          item: 1,
          total: {
            $subtract: [
              { $add: ["$price", "$fee"] },
              "$discount"
            ]
          }
        }
      }
    ]);

Observe que um dos argumentos do $subtract é o resultado de uma expressão ( $add ) que soma dois campos da coleção ( price e fee ). O segundo argumento (valor a ser subtraído) recebe o campo $discount. Resultado:

    { "_id" : 1, "item" : "abc", "total" : 7 }
    { "_id" : 2, "item" : "jkl", "total" : 19 }

É possível subtrair duas datas também. A operação a seguir utiliza a expressão $subtract para subtrair o valor do campo date da data corrente, utilizando a variável de sistema NOW e retorna a diferença em milissegundos:

    db.sales.aggregate([
      {
        $project: {
          item: 1,
          dateDifference: {
            $subtract: ["$$NOW", "$date"]
          }
        }
      }
    ]);

Ou você pode-se utilizar a função Date() para obter a data corrente:

    db.sales.aggregate([
      {
        $project: {
          item: 1,
          dateDifference: {
            $subtract: [new Date(), "$date"]
          }
        }
      }
    ]);

Você também pode utilizar milissegundos como argumento da subtração. A operação seguinte subtrai 5 minutos do campo date :

    db.sales.aggregate([
      {
        $project: {
          item: 1,
          dateDifference: {
            $subtract: ["$date", 5 * 60 * 1000]
          }
        }
      }
    ]);

FIXACAO:

1- Calcule qual o lucro total de cada produto, considerando o preço de compra, os impostos e seu valor de venda.

    db.products.aggregate([
      {
        $project: {
          item: 1,
          lucroTotal: {
            $subtract: [
              "$sale_price",
              { $add: ["$purchase_price", "$taxes"] },
            ],
          },
        },
      },
    ]);


*Expressão $ceil*

A expressão $ceil basicamente arredonda o número especificado para "cima". Ela executa a função matemática teto que converte um número x no número inteiro mais próximo, que seja maior ou igual a x. Documentos para exemplo:

    { _id: 1, value: 9.25 },
    { _id: 2, value: 8.73 },
    { _id: 3, value: 4.32 },
    { _id: 4, value: -5.34 }

A operação a seguir utiliza a expressão $ceil no estágio $project para retornar um novo campo chamado ceilingValue:

    db.samples.aggregate([
      { $project: { value: 1, ceilingValue: { $ceil: "$value" } } }
    ]);

Resultado:

    { "_id" : 1, "value" : 9.25, "ceilingValue" : 10 }
    { "_id" : 2, "value" : 8.73, "ceilingValue" : 9 }
    { "_id" : 3, "value" : 4.32, "ceilingValue" : 5 }
    { "_id" : 4, "value" : -5.34, "ceilingValue" : -5 }


*Expressão $floor*

Já a expressão $floor retorna o maior número inteiro menor ou igual ao número especificado, ou seja, faz um arredondamento para baixo. Usando a colecao de exemplo do ceil:

    db.samples.aggregate([
      { $project: { value: 1, floorValue: { $floor: "$value" } } }
    ]);

Resultado:

    { "_id" : 1, "value" : 9.25, "floorValue" : 9 }
    { "_id" : 2, "value" : 8.73, "floorValue" : 8 }
    { "_id" : 3, "value" : 4.32, "floorValue" : 4 }
    { "_id" : 4, "value" : -5.34, "floorValue" : -6 }


*Expressão $round*

A expressão $round retorna o número inteiro mais próximo do valor atual e também permite definir a quantidade de casas decimais que você quer manter ao arredondar.
Usando a colecao de exemplo do operador ceil:

    db.samples.aggregate([
      { $project: { value: 1, roundedValue: { $round: ["$value"] } } }
    ]);

Resultado:

    { "_id" : 1, "value" : 9.25, "roundedValue" : 9 }
    { "_id" : 2, "value" : 8.73, "roundedValue" : 9 }
    { "_id" : 3, "value" : 4.32, "roundedValue" : 4 }
    { "_id" : 4, "value" : -5.34, "roundedValue" : -5 }

Observe que para todos os valores, o $round arredondou os valores para o mais próximo, podendo ser maior ou menor. O que interessa aqui é qual o inteiro mais próximo, independente se for maior ou menor que o valor anterior. Essa é uma das diferenças do $round para o $ceil e para o $floor .
Outra diferença é que para o $round nós passamos uma array como argumento, em vez de um valor plano , isso acontece, para caso, passemos um segundo parâmetro ele vai arredondar mantendo a quantidade de casas decimais que for definida. Exemplo:

    db.samples.aggregate([
      { $project: { value: 1, roundedValue: { $round: ["$value", 1] } } }
    ])

Resultado:

    { "_id" : 1, "value" : 9.25, "roundedValue" : 9.2 }
    { "_id" : 2, "value" : 8.73, "roundedValue" : 8.7 }
    { "_id" : 3, "value" : 4.32, "roundedValue" : 4.3 }
    { "_id" : 4, "value" : -5.34, "roundedValue" : -5.3 }


*Expressão $abs*

A expressão $abs retorna o valor absoluto de um número. Essa expressão é muito útil para encontrar a diferença entre dois valores. Collection para exemplo:

    { _id: 1, start: 5, end: 8 },
    { _id: 2, start: 4, end: 4 },
    { _id: 3, start: 9, end: 7 },
    { _id: 4, start: 6, end: 7 },

Aplicando a expressão $abs combinada com a expressão $subtract no estágio $project, podemos retornar a diferença entre os valores dos campos start e end:

    db.ratings.aggregate([
      {
        $project: {
          delta: {
            $abs: { $subtract: ["$start", "$end"] }
          }
        }
      }
    ]);

Resultado:

    { "_id" : 1, "delta" : 3 }
    { "_id" : 2, "delta" : 0 }
    { "_id" : 3, "delta" : 2 }
    { "_id" : 4, "delta" : 1 }


*Expressão $multiply*

A expressão $multiply multiplica dois valores numéricos. Esses valores devem ser passados num array , como nas outras expressões anteriores. Collection para exemplo:

    { _id: 1, item: "abc", price: 10, quantity: 2, date: ISODate("2014-03-01T08:00:00Z") },
    { _id: 2, item: "jkl", price: 20, quantity: 1, date: ISODate("2014-03-01T09:00:00Z") },
    { _id: 3, item: "xyz", price: 5, quantity: 10, date: ISODate("2014-03-15T09:00:00Z") },

Utilizamos o $multiply no estágio $project para projetar um novo campo chamado total , que conterá o valor da multiplicação entre os campos price e quantity:

    db.sales.aggregate([
      {
        $project: {
          date: 1,
          item: 1,
          total: {
            $multiply: ["$price", "$quantity"]
          }
        }
      }
    ]);

Resultado:

    { "_id" : 1, "item" : "abc", "date" : ISODate("2014-03-01T08:00:00Z"), "total" : 20 }
    { "_id" : 2, "item" : "jkl", "date" : ISODate("2014-03-01T09:00:00Z"), "total" : 20 }
    { "_id" : 3, "item" : "xyz", "date" : ISODate("2014-03-15T09:00:00Z"), "total" : 50 }


*Expressão $divide*

A expressão $divide , como o próprio nome sugere, divide dois valores. O primeiro argumento é o dividendo , e o segundo é o divisor. Collection para exemplo:

    { _id: 1, name: "A", hours: 80, resources: 7 },
    { _id: 2, name: "B", hours: 40, resources: 4 },

Utilizamos o $divide para dividir o valor do campo hours por 8 e calcular o número de dias de trabalho ( workdays ):

    db.planning.aggregate([
      {
        $project: {
          name: 1,
          workdays: {
            $divide: ["$hours", 8]
          }
        }
      }
    ]);

Resultado:

    { "_id" : 1, "name" : "A", "workdays" : 10 },
    { "_id" : 2, "name" : "B", "workdays" : 5 },


*Estágio $addFields*

O $addFields é um estágio que adiciona novos campos aos documentos. A saída desse estágio conterá todos os campos existentes nos documentos de entrada e adicionará os novos campos especificados.
Você pode incluir subdocumentos ou arrays de subdocumentos, utilizando o conceito de dot notation . Um pipeline pode conter mais de um estágio $addFields.
Sintaxe:

    db.collection.aggregate([
        {
            $addFields: {
                nomeDoCampo: <Valor do campo ou expressao que ira determina-lo>
            },
        },
    ]);

Exemplo:

    db.transactions.aggregate([
        {
            $addFields: {
                newValue: { $sum: ["$value", 1000] },
            },
        },
    ]);





