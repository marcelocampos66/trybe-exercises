**Aggregation Framework - Parte 1**

*Aggregation Pipeline*

O Aggregation Framework foi modelado sob o conceito de processamento de dados por meio de pipelines , ou seja, um "funil" . Um pipeline contém múltiplos estágios. Os documentos entram nesse "funil" e vão se transformando à medida que vão passando por esses estágios até chegarem ao estágio final, com um resultado "agregado". Exemplo:

    db.orders.aggregate([
      { $match: { status: "A" } },
      { $group: { _id: "$cust_id", total: { $sum: "$amount" } } },
    ]);

Essa operação possui dois estágios:

Primeiro Estágio : O estágio $match filtra os documentos pelo campo status , e passam para o próximo estágio somente os documentos que têm status igual a "A".

Segundo Estágio : O estágio $group agrupa os documentos pelo campo cust_id para calcular a soma dos valores do campo amount para cada cust_id único.

O método aggregate recebe como primeiro parâmetro um array de documentos, que nada mais são do que os estágios do pipeline . Você pode ter quantos estágios forem necessários dentro do mesmo aggregate.



*Operador $match*

O estágio representado pelo operador $match filtra os documentos da mesma maneira que os filtros no método find(). Exemplo:

    [
        { _id:1, name: "Dany", score: 37 },
        { _id:2, name: "Mary", score: 80 },
        { _id:3, name: "Alaric", score: 60 },
        { _id:4, name: "Agnes", score: 77 },
    ]

Usamos o Operador:

    db.orders.aggregate([
        {
            $match: { score: { $lt: 70 } }
        }
    ]);

Resultado:

    [
        { _id:1, name: "Dany", score: 37 },
        { _id:3, name: "Alaric", score: 60 },
    ]

Exemplo do video:

    db.transactions.aggregate([
      {
        $match: {
          $and: [
            { bank: "JPMorgan" },
            { value: { $gte: 20000 } },
          ]
        }
      }
    ]);

Resultado:

    [
      {
        "_id": {
          "$oid": "60c34b817623c518da5db2cf"
        },
        "value": 76000,
        "from": "Ned Flanders",
        "to": "Edna Krabappel",
        "bank": "JPMorgan"
      }
    ]


É recomendado sempre priorizar o $match o mais "cedo" possível no pipeline . Isso melhora muito a performance, uma vez que o $match limita o número de documentos passados para o próximo estágio. E se o $match for utilizado bem no começo do pipeline , a query tem a vantagem da utilização de índices.

Collection articles para os proximos exemplos:

    [
        { _id: ObjectId("512bc95fe835e68f199c8686"), author: "dave", score: 80, views: 100 },
        { _id: ObjectId("512bc962e835e68f199c8687"), author: "dave", score: 85, views: 521 },
        { _id: ObjectId("55f5a192d4bede9ac365b257"), author: "ahn", score: 60, views: 1000 },
        { _id: ObjectId("55f5a192d4bede9ac365b258"), author: "li", score: 55, views: 5000 },
        { _id: ObjectId("55f5a1d3d4bede9ac365b259"), author: "annT", score: 60, views: 50 },
        { _id: ObjectId("55f5a1d3d4bede9ac365b25a"), author: "li", score: 94, views: 999 },
        { _id: ObjectId("55f5a1d3d4bede9ac365b25b"), author: "ty", score: 95, views: 1000 },
    ]

Exemplo 1: Igualdade simples

    db.articles.aggregate(
      [{ $match : { author : "dave" } }]
    );

A operação citada seleciona todos os documentos em que o campo author seja igual a dave . Note que a sintaxe do filtro é exatamente igual à utilizada como filtro no método find().
Resultado:

    { _id: ObjectId("512bc95fe835e68f199c8686"), author: "dave", score: 80, views: 100 }
    { _id: ObjectId("512bc962e835e68f199c8687"), author: "dave", score: 85, views: 521 }


Exemplo 2: Igualdade complexa

É possível, dentro do match , utilizar operadores como or , and , in etc.

    db.articles.aggregate(
      [
        {
        match: {
            or: [
              { score: { $gt: 70, $lt: 90 } },
              { views: { $gte: 1000 } }
            ]
          }
        },
      ]
    );

Nessa operação de agregação, o primeiro estágio seleciona todos os documentos da coleção articles em que o score seja maior que 70 e menor que 90 , ou o campo views seja maior ou igual a 1000:
Resultado:

    { "_id" : ObjectId("512bc95fe835e68f199c8686"), "author" : "dave", "score" : 80, "views" : 100 }
    { "_id" : ObjectId("512bc962e835e68f199c8687"), "author" : "dave", "score" : 85, "views" : 521 }
    { "_id" : ObjectId("55f5a192d4bede9ac365b257"), "author" : "ahn", "score" : 60, "views" : 1000 }
    { "_id" : ObjectId("55f5a192d4bede9ac365b258"), "author" : "li", "score" : 55, "views" : 5000 }
    { "_id" : ObjectId("55f5a1d3d4bede9ac365b25b"), "author" : "ty", "score" : 95, "views" : 1000 }


*Operador $limit*

O operador $limit limita o número de documentos que será passado para o próximo estágio do pipeline. Ele sempre recebe um valor do tipo inteiro e positivo.

Exemplo para Limitar o número de documentos numa operação de agregação na coleção articles:

    db.articles.aggregate(
      [
        { $limit : 5 }
      ]
    );

Essa operação retorna apenas 5 documentos.

FIXACAO:

1-Selecione todas as transações feitas pelo cliente chamado "Dave America";

    db.transactions.aggregate([
      { $match: { from: "Dave America"} },
    ]);

2-Selecione todas as transações com o valor entre 700 e 6000, ou que sejam recebidas pela cliente "Lisa Simpson";

    db.transactions.aggregate([
      {
        $match: {
          $or: [
            { value: { $gte: 700, $lte: 6000 } },
            { to: "Lisa Simpson" },
          ]
        }
      }
    ]);

3-Selecione três transações com o valor acima de 1000.

    db.transactions.aggregate([
      { $match: { value: { $gt: 1000 } } },
      { $limit: 3 },
    ]);


*Operador $group*

Com ele é possível agrupar valores de diversas formas, desde um "distinct" simples até cálculos mais elaborados com a ajuda de outros operadores. Exemplo:

    [
        { _id:1, name: "Dany", score: 37 },
        { _id:2, name: "Mary", score: 80 },
        { _id:3, name: "Alaric", score: 60 },
        { _id:4, name: "Agnes", score: 77 },
    ]

Usamos a query:

    db.orders.aggregate([
        { $group: { _id: null, total: { $sum: 1 } } }
    ]);

Resultado:

    { _id: null, total: 4 }

O principal parâmetro do $group é o _id (que não tem nada a ver com o campo _id das coleções). Neste caso, ele é responsável por conter o campo ou os campos que serão utilizados no agrupamento. Outro Exemplo:

    [
        { _id:1, name: "Camisa", brand_id: 27 },
        { _id:2, name: "Bermuda", brand_id: 18 },
        { _id:3, name: "Luvas", brand_id: 30 },
        { _id:4, name: "Camisa", brand_id: 42 },
    ]

Usamos a query:

    db.orders.aggregate([
        { $group: { _id: "$item", quant: { $sum: 1 } } }
    ]);

Resultado:

    { _id: "Camisa", quant: 2 },
    { _id: "Bermuda", quant: 1 },
    { _id: "Luvas", quant: 1 },

No documento de saída, o _id contém um agrupamento exclusivo para cada valor. Esses documentos de saída também podem conter campos calculados , que conterão valores de alguma expressão de acumulação.


Operador de Acumulação

A seguir há uma lista com alguns dos operadores de acumulação mais utilizados:

    $addToSet : retorna um array com os valores únicos da expressão para cada grupo;
    $avg : retorna a média de valores numéricos. Valores não numéricos são ignorados;
    $first : retorna um valor do primeiro documento de cada grupo;
    $last : retorna um valor do último documento de cada grupo;
    $max : retorna o maior valor de cada grupo;
    $sum : retorna a soma de valores numéricos. Valores não numéricos são ignorados.


Coleção sales para os proximos exemplos:

    {
      _id: 1,
      item: "abc",
      price: NumberDecimal("10"),
      quantity: NumberInt("2"),
      date: ISODate("2014-03-01T08:00:00Z")
    },
    {
      _id: 2,
      item: "jkl",
      price: NumberDecimal("20"),
      quantity: NumberInt("1"),
      date: ISODate("2014-03-01T09:00:00Z")
    },
    {
      _id: 3,
      item: "xyz",
      price: NumberDecimal("5"),
      quantity: NumberInt( "10"),
      date: ISODate("2014-03-15T09:00:00Z")
    },
    {
      _id: 4,
      item: "xyz",
      price: NumberDecimal("5"),
      quantity:  NumberInt("20"),
      date: ISODate("2014-04-04T11:21:39.736Z")
    },
    {
      _id: 5,
      item: "abc",
      price: NumberDecimal("10"),
      quantity: NumberInt("10"),
      date: ISODate("2014-04-04T21:23:13.331Z")
    },
    {
      _id: 6,
      item:"def",
      price: NumberDecimal("7.5"),
      quantity: NumberInt("5" ),
      date: ISODate("2015-06-04T05:08:13Z")
    },
    {
      _id: 7,
      item: "def",
      price: NumberDecimal("7.5"),
      quantity: NumberInt("10"),
      date: ISODate("2015-09-10T08:43:00Z")
    },
    {
      _id: 8,
      item: "abc",
      price: NumberDecimal("10"),
      quantity: NumberInt("5" ),
      date: ISODate("2016-02-06T20:20:13Z")
    }

Exemplo 1: Contando o número de documentos

podemos utilizar o operador $group para contar o número de documentos de uma coleção:

    db.sales.aggregate([
      {
        group: {
          _id: null,
          count: { $sum: 1 }
        }
      }
    ]);

Note que o _id está setado como null , porque nesse caso queremos todos os documentos. Resultado:

    { "_id" : null, "count" : 8 }

Você também poderia utilizar o método count() para realizar essa operação:

    db.sales.countDocuments();


Exemplo 2: Retornando valores distintos

O operador $group também pode ser utilizado para encontrar os valores distintos de um campo. Por exemplo, se quiser saber todos os valores únicos do campo item e quantos são, faça como o exemplo seguinte:

    db.sales.aggregate([
      {
        $group : {
          _id : "$item",
          count: { $sum: 1}
        }
      }
    ]);

Note que o campo deve ser precedido de $. Resultado:

    { "_id" : "abc", "count" : 3 }
    { "_id" : "def", "count" : 2 }
    { "_id" : "xyz", "count" : 2 }
    { "_id" : "jkl", "count" : 1 }


Exemplo 3: Somando valores

Para saber o valor das vendas, você deve utilizar o operador $sum , que, por sua vez, aceita mais modificadores. No exemplo que se segue, multiplica-se o valor do campo price pelo valor do campo quantity:

    db.sales.aggregate([
      {
        $group : {
          _id : "$item",
          totalSaleAmount: {
            $sum: {
                $multiply: ["$price", "$quantity"]
            }
          }
        }
      }
    ]);

Resultado:

    { "_id" : "def", "totalSaleAmount" : NumberDecimal("112.5") }
    { "_id" : "abc", "totalSaleAmount" : NumberDecimal("170") }
    { "_id" : "jkl", "totalSaleAmount" : NumberDecimal("20") }
    { "_id" : "xyz", "totalSaleAmount" : NumberDecimal("150") }


Exemplo 4: Having

Também é possível realizar operações equivalentes ao HAVING do SQL , que nada mais é que um filtro depois de um agrupamento. Por exemplo, se você quiser manter o agrupamento anterior, mas saber apenas as vendas que possuem valores maiores do que 100 , é só adicionar mais um estágio no pipeline:

    db.sales.aggregate([
      // Primeiro Estágio
      {
        $group: {
          _id : "$item",
          totalSaleAmount: {
            $sum: {
                multiply: ["$price", "$quantity"]
            }
          }
        }
      },
      // Segundo Estágio
      {
        $match: { "totalSaleAmount": { $gte: 100 } },
      }
    ]);

Resultado:

    { "_id" : "abc", "totalSaleAmount" : NumberDecimal("170") }
    { "_id" : "xyz", "totalSaleAmount" : NumberDecimal("150") }
    { "_id" : "def", "totalSaleAmount" : NumberDecimal("112.5") }


Exemplo 5: Agrupando por null

Você pode executar operações matemáticas em todos os documentos de uma coleção. Basta passar null no _id e seguir com os operadores de acumulação.
No exemplo a seguir, a operação de agregação retornará um documento com o valor total da venda, a quantidade média de itens vendidos e o total de vendas:

    db.sales.aggregate([
      {
        group : {
          _id : null,
          totalSaleAmount: {
            $sum: { $multiply: ["$price", "$quantity"] }
          },
          averageQuantity: { $avg: "$quantity" },
          count: { $sum: 1 }
        }
      }
    ]);

Resultado:

    {
      "_id" : null,
      "totalSaleAmount" : NumberDecimal("452.5"),
      "averageQuantity" : 7.875,
      "count" : 8
    }

FIXACAO:

1- Selecione todos os bancos;

    db.transactions.aggregate([
      {
        $group: { _id: null, count: { $sum: 1 } }
      },
    ]);

2- Selecione o valor total das transações em cada banco e quantas são;

    db.transactions.aggregate([
      {
        $group: {
          _id: "$bank",
          transactionsQuantity: { $sum: 1 },
          total: { $sum: "$value" },
        }
      },
    ]);

3- Selecione o valor total de transações;

    db.transactions.aggregate([
      {
        $group: {
          _id: null,
          total: { $sum: "$value" },
        }
      },
    ]);

4- Selecione os bancos que têm o valor total de transações maior que 1000.

    db.transactions.aggregate([
      {
        $group: {
          _id: "$bank",
          transactionsQuantity: { $sum: 1 },
          total: { $sum: "$value" },
        }
      },
      {
        $match: { total: { $gt: 1000 } },
      },
    ]);


*Operador $project*

O operador $project tem como uma de suas funções passar adiante no pipeline apenas alguns campos dos documentos vindos do estágio anterior, fazendo isso por meio de uma "projeção", como no método find().
Assim como numa projeção comum, o único campo que precisa ser negado explicitamente é o _id.
Se você especificar um campo que não existe, o $project simplesmente ignorará esse campo, sem afetar em nada a projeção.

Documento para exemplo:

    {
      _id: 1,
      title: "abc123",
      isbn: "0001122223334",
      author: { last: "zzz", first: "aaa" },
      copies: 5
    }

Exemplo 1: Incluindo campos específicos
Para incluir apenas os campos _id , title e author no documento de saída:

    db.books.aggregate(
      [
        {
          $project : {
            title : 1,
            author : 1
          }
        }
      ]
    );

Exemplo 2: Excluindo o campo _id
O campo _id é padrão e é o único que necessita de uma negação explícita para que não seja incluído no documento de saída:

    db.books.aggregate([
      {
        $project : {
          _id: 0,
          title : 1,
          author : 1
        }
      }
    ]);

Exemplo 3: Excluindo campos e campos em subdocumentos
Para documentos embedados , seguimos os mesmos conceitos de dot notation:

    db.books.aggregate([
      {
        $project : {
          "author.first": 0,
          copies: 0
        }
      }
    ]);

Para inclusão de campos embedados , utilize a mesma lógica, apenas substituindo o 0 por 1.

Exemplo 4: Incluindo campos calculados
A operação a seguir adiciona os novos campos isbn , lastname e copiesSold:

    db.books.aggregate([
      {
        $project: {
          title: 1,
          isbn: {
            prefix: { $substr: ["$isbn", 0, 3] },
            group: { $substr: ["$isbn", 3, 2] },
            publisher: { $substr: ["$isbn", 5, 4] },
            title: { $substr: ["$isbn", 9, 3] },
            checkDigit: { $substr: ["$isbn", 12, 1] }
          },
          lastName: "$author.last",
          copiesSold: "$copies"
        }
      }
    ]);

Resultado:

    {
      "_id" : 1,
      "title" : "abc123",
      "isbn" : {
        "prefix" : "000",
        "group" : "11",
        "publisher" : "2222",
        "title" : "333",
        "checkDigit" : "4"
      },
      "lastName" : "zzz",
      "copiesSold" : 5
    }


*Operador $unwind*

O operador $unwind "desconstrói" um campo array do documento de entrada e gera como saída um documento para cada elemento do array. Exmeplo:

    db.inventory.insertOne({ _id: 7, item: "ABC1", sizes: ["S", "M", "L"] });

    { _id: 7, item: "ABC1", sizes: ["S", "M", "L"] }

utilizando o $unwind como um estágio do pipeline:

    db.inventory.aggregate([{ $unwind : "$sizes" }]);

Resultado:

    { "_id" : 7, "item" : "ABC1", "sizes" : "S" }
    { "_id" : 7, "item" : "ABC1", "sizes" : "M" }
    { "_id" : 7, "item" : "ABC1", "sizes" : "L" }


*Operador $lookup*

Com ele, é possível juntar documentos de outra coleção ( join ). Como resultado dessa junção, um elemento do tipo array é adicionado a cada documento da coleção de entrada, contendo os documentos que deram "match" na coleção com a qual se faz o "join".


Existem quatro parâmetros básicos para montar um $lookup:

- from : uma coleção no mesmo database para executar o join ;
- localField : o campo da coleção de onde a operação de agregação está sendo executada. Será comparado por igualdade com o campo especificado no parâmetro foreingField ;
- foreingField : o campo da coleção especificada no parâmetro from que será comparado com o campo localField por igualdade simples;
- as : o nome do novo array que será adicionado.

EXEMPLOS:
1- Join com igualdade simples
Colecoes para exemplo:

// orders
{ _id: 1, item: "almonds", price: 12, quantity: 2 },
{ _id: 2, item: "pecans", price: 20, quantity: 1 },
{ _id: 3 }

// inventory
{ _id: 1, sku: "almonds", description: "product 1", instock: 120 },
{ _id: 2, sku: "bread", description: "product 2", instock: 80 },
{ _id: 3, sku: "cashews", description: "product 3", instock: 60 },
{ _id: 4, sku: "pecans", description: "product 4", instock: 70 },
{ _id: 5, sku: null, description: "Incomplete" },
{ _id: 6 }

Imagine que você queria retornar em uma única query os documentos correspondentes das duas coleções mencionadas. A primeira coisa é encontrar um campo em comum entre elas. Nesse caso, seriam os campos item (coleção orders ) e sku (coleção inventory ). Quando cruzados na operação a seguir, um novo campo, chamado inventory_docs , será adicionado ao resultado final:

db.orders.aggregate([
  {
    $lookup: {
      from: "inventory",
      localField: "item",
      foreignField: "sku",
      as: "inventory_docs"
    }
  }
]);

Resultado:

    {
      "_id" : 1,
      "item" : "almonds",
      "price" : 12,
      "quantity" : 2,
      "inventory_docs" : [
        {
          "_id" : 1,
          "sku" : "almonds",
          "description" : "product 1",
          "instock" : 120
        }
      ]
    }
    {
      "_id" : 2,
      "item" : "pecans",
      "price" : 20,
      "quantity" : 1,
      "inventory_docs" : [
        {
          "_id" : 4,
          "sku" : "pecans",
          "description" : "product 4",
          "instock" : 70
        }
      ]
    }
    {
      "_id" : 3,
      "inventory_docs" : [
        {
          "_id" : 5,
          "sku" : null,
          "description" : "Incomplete"
        },
        {
          "_id" : 6
        }
      ]
    }

FIXACAO:

1- Selecione todos os clientes com as suas respectivas transações feitas;

    db.clients.aggregate([
      {
        $lookup: {
          from: "transactions",
          localField: "name",
          foreignField: "from",
          as: "transactions",
        },
      },
    ]);

2- Selecione quatro clientes com as suas respectivas transações recebidas;

    db.clients.aggregate([
      {
        $lookup: {
          from: "transactions",
          localField: "name",
          foreignField: "from",
          as: "transactions",
        },
      },
      {
        $limit: 4,
      },
    ]);

3- Selecione todos os cliente do estado da "Florida" e suas respectivas transações recebidas.

    db.clients.aggregate([
      {
        $match: { State: "Florida" },
      },
      {
        $lookup: {
          from: "transactions",
          localField: "name",
          foreignField: "from",
          as: "transactions",
        },
      },
    ]);


