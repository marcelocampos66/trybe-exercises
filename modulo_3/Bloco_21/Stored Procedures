**Montando blocos de código SQL reutilizáveis com stored procedures e stored functions**

*CRIAR VARIAVEIS*

    SET @nomedavariavel = valor da variavel

    Ex:
    SET @player = 'Cristiano Ronaldo'
    SELECT * FROM soccer_players.player WHERE name = @player;

*CREATE PROCEDURE*

Para tornar a leitura do seu código mais fácil e sua manutenção mais simples, siga o seguinte padrão ao nomear suas procedures e functions:

    -- Verbo + Resultado

    ObterTotalDeVendas
    ExibirRankMaximo
    ObterClienteMaisAtivo
    CalcularNivelEngajamento
    MontarNomeCompleto

Temos os seguintes tipos de stored procedure:

    - Procedure sem parâmetros;
    - Procedure com parâmetros de entrada (IN) ;
    - Procedure com parâmetros de saída (OUT) ;
    - Procedure com parâmetros de entrada e saída (IN-OUT).

Estrutura padrão de uma stored procedure

    USE banco_de_dados; -- obrigatório para criar a procedure no banco correto
    DELIMITER $$ -- definindo delimitador

    CREATE PROCEDURE nome_da_procedure(@parametro1, @parametro2, ..., @parametroN) -- parâmetros
    BEGIN -- delimitando o início do código SQL

    END $$ -- delimitando o final do código SQL

    DELIMITER ; -- muda o delimitador de volta para ; - o espaço entre DELIMITER e o ';' é necessário

    
Exemplo1 - Procedure sem parâmetros:

    USE soccer_players;
    DELIMITER $$;
    
    CREATE PROCEDURE ObterNomeDosJogadores()
    BEGIN
        SELECT name FROM player;
    END $$;

    DELIMITER ;

    E PARA CHAMAR A PROCEDURE

    CALL ObterNomeDosJogadores;

    /////

    USE sakila;
    DELIMITER $$

    CREATE PROCEDURE ShowAllActors()
    BEGIN
        SELECT * FROM sakila.actor;
    END $$

    DELIMITER ;

    -- Como usar:

    CALL ShowAllActors();


Exemplo2 - Procedure com parâmetros de entrada (IN):

    USE soccer_players;
    DELIMITER $$;
    
    CREATE PROCEDURE SelecionarJogadoresComNotaMaiorQue(IN nota NUMERIC)
    BEGIN
        SELECT * FROM player WHERE overall > nota;
    END $$;

    DELIMITER;

    E PARA CHAMAR:

    CALL SelecionarJogadoresComNotaMaiorQue(90);

    /////

    USE sakila;
    DELIMITER $$

    CREATE PROCEDURE ShowActorsWithSyllable(IN syllable VARCHAR(100))
    BEGIN
        SELECT *
        FROM sakila.actor
        WHERE first_name LIKE CONCAT('%', syllable, '%');
    END $$

    DELIMITER ;

    -- Como usar:

    CALL ShowActorsWithSyllable('lope');

Exemplo3 - Procedure com parâmetros de saída (OUT):

    USE soccer_players;
    DELIMITER $$;
    
    CREATE PROCEDURE RetornaMediaDosJogadores(OUT averageOverall DOUBLE) -- DOUBLE = tipo decimal?
    BEGIN
        SELECT AVG(overall) FROM player INTO averageOverall
    END $$;

    DELIMITER;

    E PARA CHAMAR:

    CALL RetornaMediaDosJogadores(@average); // A VARIAVEL @average PODE SER UTILIZADA EM OUTRA PARTE DA QUERY

    SELECT @average

Exemplo4 - Procedure com parâmetros de entrada e saída (IN-OUT):

    USE soccer_players;
    DELIMITER $$;
    
    CREATE PROCEDURE RetornaMediaDosJogadoresDeUmTime(IN selectedTeam VARCHAR(50), OUT averageOverallOfTeam DOUBLE)
    BEGIN
        SELECT AVG(overall) FROM player WHERE team = selectedTeam INTO averageOverallOfTeam
    END $$;

    DELIMITER;

    E PARA CHAMAR:

    CALL RetornaMediaDosJogadoresDeUmTime('Liverpool', @average); // A VARIAVEL @average PODE SER UTILIZADA EM OUTRA PARTE DA QUERY
    SELECT name FROM player WHERE overall > @average;

    /////

    USE sakila;
    DELIMITER $$

    CREATE PROCEDURE ShowAverageRentalDurationOfMovie(
        IN film_name VARCHAR(300),
        OUT media_aluguel_em_dias DOUBLE
    )
    BEGIN
        SELECT AVG(rental_duration) INTO media_aluguel_em_dias
        FROM sakila.film
        WHERE title = film_name;
    END $$

    DELIMITER ;

    -- Como usar:

    CALL ShowAverageRentalDurationOfMovie('ACADEMY DINOSAUR', @media_de_dias);
    SELECT @media_de_dias;

Exemplo5 - Procedure com parâmetros de entrada e saída (INOUT):

    USE soccer_players;
    DELIMITER $$;
    
    CREATE PROCEDURE RetornaIdadeDoJogador(INOUT selectedPlayer VARCHAR(200))
    BEGIN
        SELECT
        CONCAT('O jogador ', selectedPlayer, ' tem ' , age, ' anos')
        FROM player
        WHERE name = selectedPlayer
        INTO selectedPlayer;
    END $$;

    DELIMITER;

    E PARA CHAMAR:
    SET @player = 'Iniesta';
    CALL RetornaIdadeDoJogador(@player);
    SELECT @player; // RETORNA 'O jogador Iniesta tem 36 anos'

    /////

    USE sakila;
    DELIMITER $$

    CREATE PROCEDURE NameGenerator(INOUT film_name VARCHAR(300))
    BEGIN
        SELECT CONCAT('ULTRA ', film_name, ' THE BEST MOVIE OF THE CENTURY')
        INTO film_name;
    END $$

    DELIMITER ;

    -- Como usar:

    SET @movie_title = 'ACE GOLDFINGER';
    CALL NameGenerator(@movie_title);
    SELECT @movie_title;



*TIPOS DE DADOS*

Existem vários tipos de dados no MySQL que vão além de apenas numéricos e strings. É relevante que você tenha uma noção básica, sabendo que esses tipos no MySQL são determinados por meio de algumas características:

    - Tipo de valor que representa;
    - O espaço ocupado e se possui comprimento fixo ou variável;
    - Se os valores podem ser indexados ou não;
    - Comparação de valores de um tipo de dado específico pelo MySQL .

Os principais tipos de dados do MySQL são:

Tipos de String

    VARCHAR : Uma string não binária de comprimento variável;
    CHAR : Uma string não binária (caractere) de comprimento fixo;
    TEXT : Uma pequena string não binária.

Tipos Numéricos

    TYNINT : Um número inteiro muito pequeno;
    INT : Um inteiro padrão;
    BIGINT : Um grande número inteiro;
    DECIMAL : Um número de ponto fixo.


FIXACAO STORE PROCEDURES

    USE sakila;
    DELIMITER $$

    CREATE PROCEDURE Retorna10AtoresMaisPopulares()
    BEGIN
	    SELECT actor_id, COUNT(film_id) AS quantidade_filmes
	    FROM film_actor
	    GROUP BY actor_id
	    ORDER BY quantidade_filmes DESC
	    LIMIT 10;
    END $$

    DELIMITER ;

    /////

    USE sakila;
    DELIMITER $$

    CREATE PROCEDURE RetornaFilmePorCategoria(IN category VARCHAR(100))
    BEGIN
	    SELECT F.film_id, F.title, C.category_id, C.`name` FROM film AS F
	    INNER JOIN sakila.film_category AS FC ON FC.film_id = F.film_id
	    INNER JOIN sakila.category AS C ON C.category_id = FC.category_id
	    WHERE C.`name` = category;
    END $$

    DELIMITER ;

    /////

    USE sakila;
    DELIMITER $$

    CREATE PROCEDURE RetornaSeOCLienteEstaAtivo(IN emailCliente VARCHAR(200), OUT estaAtivo BOOL )
    BEGIN
	    SET estaAtivo = (SELECT `active` FROM customer WHERE email = emailCliente);
    END $$

    DELIMITER ;
