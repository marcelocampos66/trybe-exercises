*Manipulação de strings*

    -- Converte o texto da string para CAIXA ALTA
    SELECT UCASE('Oi, eu sou uma string');

    -- Converte o texto da string para caixa baixa
    SELECT LCASE('Oi, eu sou uma string');

    -- Substitui as ocorrências de uma substring em uma string
    SELECT REPLACE('Oi, eu sou uma string', 'string', 'cadeia de caracteres');

    -- Retorna a parte da esquerda de uma string de acordo com o
    -- número de caracteres especificado
    SELECT LEFT('Oi, eu sou uma string', 3);

    -- Retorna a parte da direita de uma string de acordo com o
    -- número de caracteres especificado
    SELECT RIGHT('Oi, eu sou um string', 6);

    -- Exibe o tamanho, em caracteres, da string
    SELECT LENGTH('Oi, eu sou uma string');

    -- Extrai parte de uma string de acordo com o índice de um caractere inicial
    -- e a quantidade de caracteres a extrair
    SELECT SUBSTRING('Oi, eu sou uma string', 5, 2);

    -- Se a quantidade de caracteres a extrair não for definida,
    -- então a string será extraída do índice inicial definido, até o seu final
    SELECT SUBSTRING('Oi, eu sou uma string', 5);

OUTROS EXEMPLOS:

    SELECT UCASE(title) FROM sakila.film LIMIT 10;
    SELECT LCASE(title) FROM sakila.film LIMIT 10;
    SELECT REPLACE(title, 'ACADEMY', 'FOO') FROM sakila.film WHERE film_id = 1;
    SELECT LEFT(title, 7) FROM sakila.film WHERE film_id = 1;
    SELECT RIGHT(title, 8) FROM sakila.film WHERE film_id = 1;
    SELECT LENGTH(title) FROM sakila.film WHERE film_id = 1;
    SELECT SUBSTRING(title, 5, 2) FROM sakila.film WHERE film_id = 1;
    SELECT SUBSTRING(title, 5) FROM sakila.film WHERE film_id = 1;

FIXACAO:

    SELECT UCASE('trybe');
    SELECT REPLACE('Você já ouviu falar do DuckDuckGo?', 'DuckDuckGo', 'Google');
    SELECT LENGTH('Uma frase qualquer' );
    SELECT SUBSTRING('A linguagem JavaScript está entre as mais usadas', 13, 10);
    SELECT LCASE('RUA NORTE 1500, SÃO PAULO, BRASIL');

    
*Condicionais*

    --- IF ---    
    -- Sintaxe:
    SELECT IF(condicao, valor_se_verdadeiro, valor_se_falso);

    SELECT IF(idade >= 18, 'Maior de idade', 'Menor de Idade')
    FROM pessoas;

    SELECT IF(aberto, 'Entrada permitida', 'Entrada não permitida')
    FROM estabelecimentos;

    -- Exemplo utilizando o banco sakila:
    SELECT first_name, IF(active, 'Cliente Ativo', 'Cliente Inativo') AS status
    FROM sakila.customer
    LIMIT 20;

    ---CASE---
    -- Sintaxe:
    SELECT CASE
      WHEN condicao THEN valor
      ELSE valor padrao
    END;

    SELECT
        nome,
        nivel_acesso,
        CASE
            WHEN nivel_acesso = 1 THEN 'Nível de acesso 1'
            WHEN nivel_acesso = 2 THEN 'Nível de acesso 2'
            WHEN nivel_acesso = 3 THEN 'Nível de acesso 3'
            ELSE 'Usuário sem acesso'
        END AS nivel_acesso
    FROM permissoes_usuario;

    -- Exemplo utilizando a tabela sakila.film:
    SELECT
        first_name,
        email,
        CASE
            WHEN email = 'MARY.SMITH@sakilacustomer.org' THEN 'Cliente de baixo valor'
            WHEN email = 'PATRICIA.JOHNSON@sakilacustomer.org' THEN 'Cliente de médio valor'
            WHEN email = 'LINDA.WILLIAMS@sakilacustomer.org' THEN 'Cliente de alto valor'
            ELSE 'não classificado'
        END AS valor
    FROM sakila.customer
    LIMIT 10;

FIXACAO:

    SELECT 
        film_id,
        title,
        IF(title = 'ACE GOLDFINGER', 'Já assisti a esse filme', 'Não conheço o filme') AS 'conheço o filme?'
    FROM sakila.film LIMIT 10;

    SELECT 
        title,
        rating,
        CASE rating
            WHEN 'G' THEN 'Livre para todos'
            WHEN 'PG' THEN 'Não recomendado para menores de 10 anos'
            WHEN 'PG-13' THEN 'Não recomendado para menores de 13 anos'
            WHEN 'R' THEN 'Não recomendado para menores de 17 anos'
            ELSE 'Proibido para menores de idade'
        END AS 'público-alvo'
    FROM
        sakila.film;


*Funções matemáticas do MySQL*

Adição, Subtração, Multiplicação e Divisão

    SELECT 5 + 5;
    SELECT 5 - 5;
    SELECT 5 * 5;
    SELECT 5 / 5;

Podemos, também, usar as colunas diretamente como base para os cálculos, caso necessário.

    SELECT rental_duration + rental_rate FROM sakila.film LIMIT 10;
    SELECT rental_duration - rental_rate FROM sakila.film LIMIT 10;
    SELECT rental_duration / rental_rate FROM sakila.film LIMIT 10;
    SELECT rental_duration * rental_rate FROM sakila.film LIMIT 10;

O DIV retorna o resultado inteiro de uma divisão, ignorando as casas decimais de um número. Veja os exemplos abaixo:

    SELECT 10 DIV 3; -- 3
    SELECT 10 DIV 2; -- 5
    SELECT 14 DIV 3; -- 4
    SELECT 13 DIV 2; -- 6

Já o operador MOD retorna o resto de uma divisão como resultado. Por exemplo:

    SELECT 10 MOD 3; -- 1
    SELECT 10 MOD 2; -- 0
    SELECT 14 MOD 3; -- 2
    SELECT 13 MOD 2; -- 1
    SELECT 10.5 MOD 2; -- 0.5, ou seja, 2 + 2 + 2 + 2 + 2 = 10, restando 0.5

FIXACAO MOD E DIV:

    SELECT IF((15 MOD 2) = 0, 'Par', 'Ímpar') AS 'Par ou Ímpar';
    SELECT 220 DIV 12;


*Arredondando Valores*

O ROUND arredonda os números de acordo com sua parte decimal. Se for maior ou igual a 0.5, o resultado é um arredondamento para cima. Caso contrário, ocorre um arredondamento para baixo.

    -- Podemos omitir ou especificar quantas casas decimais queremos
    SELECT ROUND(10.4925); -- 10
    SELECT ROUND(10.5136); -- 11
    SELECT ROUND(-10.5136); -- -11
    SELECT ROUND(10.4925, 2); -- 10.49
    SELECT ROUND(10.4925, 3); -- 10.493

O arredondamento sempre para cima pode ser feito com o CEIL:

    SELECT CEIL(10.51); -- 11
    SELECT CEIL(10.49); -- 11
    SELECT CEIL(10.2); -- 11

O arredondamento sempre para baixo pode ser feito com o FLOOR:

    SELECT FLOOR(10.51); -- 10
    SELECT FLOOR(10.49); -- 10
    SELECT FLOOR(10.2); -- 10


*Exponenciação e Raiz Quadrada*

Para cálculos de exponenciação e raiz quadradas, podemos utilizar as funções POW e SQRT , respectivamente.

Elevando um número X à potência Y usando a função POW:

    SELECT POW(2, 2); -- 4
    SELECT POW(2, 4); -- 16

Encontrando a raiz quadrada de um valor usando SQRT :

    SELECT SQRT(9); -- 3
    SELECT SQRT(16); -- 4


*Gerando valores aleatórios*

Para situações em que se faz necessário gerar valores aleatórios, podemos usar a função RAND , em conjunto com as funções anteriores.

    -- Para gerar um valor aleatório entre 0 e 1:
    SELECT RAND();

    -- Para gerar um valor entre 7 e 13:
    SELECT ROUND(7 + (RAND() * 6));
    -- O cálculo que é feito é o seguinte: (7 + (0.0 a 1.0 * 6))

FIXACAO:
    SELECT FLOOR(15 + (RAND() * 5)); --gera um valor entre 15 e 20.
    SELECT ROUND(15.75, 5);
    SELECT FLOOR(39.494);
    SELECT CEIL(85.234);


*Trabalhando com datas*

Conseguimos fazer algumas coisas legais, como por exemplo consultar a data e hora atuais usando as seguintes funções:

    SELECT CURRENT_DATE(); -- YYYY-MM-DD
    SELECT NOW(); -- YYYY-MM-DD HH:MM:SS

Também podemos calcular a diferença em dias entre duas datas usando o DATEDIFF e a diferença de tempo entre dois horários usando o TIMEDIFF . Em ambos os casos, o segundo valor é subtraído do primeiro para calcular o resultado.

    -- 30, ou seja, a primeira data é 30 dias depois da segunda
    SELECT DATEDIFF('2020-01-31', '2020-01-01');

    -- -30, ou seja, a primeira data é 30 dias antes da segunda
    SELECT DATEDIFF('2020-01-01', '2020-01-31');

    -- -01:00:00, ou seja, há 1 hora de diferença entre os horários
    SELECT TIMEDIFF('08:30:10', '09:30:10');

E por fim, podemos extrair qualquer parte de uma data de uma coluna:

    SELECT DATE(data_cadastro); -- YYYY-MM-DD
    SELECT YEAR(data_cadastro); -- Ano
    SELECT MONTH(data_cadastro); -- Mês
    SELECT DAY(data_cadastro); -- Dia
    SELECT HOUR(data_cadastro); -- Hora
    SELECT MINUTE(data_cadastro); -- Minuto
    SELECT SECOND(data_cadastro); -- Segundo

Podemos usar CURRENT_DATE() e NOW() em conjunto com os comandos acima para encontrar resultados dinâmicos da seguinte maneira:

    SELECT YEAR(CURRENT_DATE()); -- retorna o ano atual
    SELECT HOUR(NOW()); -- retorna a hora atual

FIXACAO:

    SELECT DATEDIFF('2030-01-20', CURRENT_DATE()); --diferença de dias entre '2030-01-20' e hoje.
    SELECT TIMEDIFF('11:00:00', '10:25:45'); --diferença de horas entre '10:25:45' e '11:00:00'.


*Utilizando as funções de agregação AVG , MIN , MAX , SUM e COUNT*

-- Usando a coluna replacement_cost (valor de substituição) vamos encontrar:

    SELECT AVG(replacement_cost) FROM sakila.film; -- 19.984000 (Média entre todos registros)
    SELECT MIN(replacement_cost) FROM sakila.film; -- 9.99 (Menor valor encontrado)
    SELECT MAX(replacement_cost) FROM sakila.film; -- 29.99 (Maior valor encontrado)
    SELECT SUM(replacement_cost) FROM sakila.film; -- 19984.00 (Soma de todos registros)
    SELECT COUNT(replacement_cost) FROM sakila.film; -- 1000 registros encontrados (Quantidade)

FIXACAO:

    SELECT 
        AVG(length) AS 'Média de Duração',
        MIN(length) AS 'Duração Mínima',
        MAX(length) AS 'Duração Máxima',
        SUM(length) AS 'Tempo de Exibição Total',
        COUNT(film_id) AS 'Filmes Registrados'
    FROM sakila.film;


*Exibindo e filtrando dados de forma agrupada com GROUP BY e HAVING*

Os resultados de uma query podem ser agrupados por uma ou mais colunas usando o GROUP BY , o que faz com que todos os registros que têm o mesmo valor para tais colunas sejam exibidos juntos. O GROUP BY também pode ser usado em conjunto com as funções de agregação que vimos anteriormente.

O GROUP BY pode ser construído da seguinte forma:

    SELECT coluna(s) FROM tabela GROUP BY coluna(s);

Uma das formas como podemos utilizar o GROUP BY é agrupar os registros pelo valor de uma coluna, exibindo apenas um registro de cada valor, como é feito com a coluna first_name a seguir.

    SELECT first_name FROM sakila.actor GROUP BY first_name;

Porém é mais comum utilizar o GROUP BY em conjunto com o AVG , MIN , MAX , SUM ou COUNT . Por exemplo, caso queiramos saber quantos registros existem na tabela de cada nome registrado, podemos usar o COUNT() . Assim, teremos uma informação mais fácil de ser compreendida.

    SELECT first_name, COUNT(*) FROM sakila.actor GROUP BY first_name;

Tendo visto isso, agora vamos explorar como utilizar o GROUP BY em conjunto com as diversas funções de agregação que foram estudadas até aqui, através alguns exemplos feitos com o nosso banco de dados sakila.

    -- Média de duração de filmes agrupados por classificação indicativa
    SELECT rating, AVG(length) FROM sakila.film GROUP BY rating;

    -- Valor mínimo de substituição dos filmes agrupados por classificação indicativa
    SELECT rating, MIN(replacement_cost) FROM sakila.film GROUP BY rating;

    -- Valor máximo de substituição dos filmes agrupados por classificação indicativa
    SELECT rating, MAX(replacement_cost) FROM sakila.film GROUP BY rating;

    -- Custo total de substituição de filmes agrupados por classificação indicativa
    SELECT rating, SUM(replacement_cost) FROM sakila.film GROUP by rating;

FIXACAO GROUP BY:

    SELECT `active`, COUNT(*)  FROM sakila.customer GROUP BY `active`;
    SELECT store_id, `active`, COUNT(*) FROM sakila.customer GROUP BY store_id, `active`;
    SELECT rating, AVG(length) AS media_de_duracao FROM sakila.film GROUP BY rating ORDER BY media_de_duracao DESC;
    SELECT district, COUNT(*) AS quantidade FROM sakila.address GROUP BY district ORDER BY quantidade DESC;


*Filtrando Resultados do GROUP BY com HAVING*

Podemos usar o HAVING para filtrar resultados agrupados, assim como usamos o SELECT...WHERE para filtrar resultados individuais.

    SELECT first_name, COUNT(*)
    FROM sakila.actor
    GROUP BY first_name
    HAVING COUNT(*) > 2;

-- Ou, melhor ainda, usando o AS para dar nomes às colunas de agregação,
-- melhorando a leitura do resultado

    SELECT first_name, COUNT(*) AS nomes_cadastrados
    FROM sakila.actor
    GROUP BY first_name
    HAVING nomes_cadastrados > 2;

-- Observação: o alias não funciona com strings para o HAVING,
-- então use o underline ("_") para separar palavras

FIXACAO HAVING:

    SELECT 
        rating, AVG(length) AS media_duracao
    FROM
        sakila.film
    GROUP BY rating
    HAVING media_duracao BETWEEN 115.0 AND 121.50
    ORDER BY media_duracao DESC;

    SELECT 
        rating, SUM(replacement_cost) AS custo_substituicao_total
    FROM
        sakila.film
    GROUP BY rating
    HAVING custo_substituicao_total > 3950.50
    ORDER BY custo_substituicao_total ASC;

