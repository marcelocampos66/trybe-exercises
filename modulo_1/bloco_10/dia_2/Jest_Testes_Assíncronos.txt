Callbacks: para testar callbacks utilizamos a função done . Ela é chamada para sinalizar ao Jest que o teste deverá aguardar o retorno da função callback para que a validação aconteça.
Promises: quando testamos promises devemos retorná-la dentro do teste. Lembre-se de utilizar then quando o retorno for um resolve e catch quando o retorno for um reject .
Async/Await: para testar funções com async e await devemos utilizar a palavra chave async na função passada para teste e await onde esperamos algum retorno assíncrono. Lembre-se que o async/await é apenas uma alternativa de sintaxe mais simples para testar promises .

/////

Matcher .resolves / .rejects
No Jest 20.0.0, para simplificar ainda mais os testes, foram adicionados os matchers .resolves e .rejects .
O .resolves espera a promise ser resolvida. Caso a promise seja rejeitada, o teste automaticamente irá falhar.
O .rejects espera a promise ser rejeitada. Caso a promise seja resolvida, o teste automaticamente irá falhar.

/////

beforeEach
O beforeEach é executado antes de cada teste, evitando que você tenha que repetir trechos de código, como por exemplo a criação de usuários utilizada no vídeo, dentro de cada teste. Dessa forma, você escreve o trecho de código uma única vez e garante que o "ambiente" esteja preparado para os testes que precisarem.

afterEach
Ele é especialmente útil para resetar configurações, dados, entre outras coisas.

Outra maneira de tunar o uso do beforeEach e do afterEach é agrupá-los através do describe , para que executem apenas para um determinado conjunto de testes, ao invés de executá-los para todos os testes, pois frequentemente um trecho de código se aplica a alguns testes, mas não a outros.